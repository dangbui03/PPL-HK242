# Generated from d:/HCMUT/PPL/2/BTL1/TimeBefore/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,51,386,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,27,1,27,5,27,237,8,27,10,27,12,27,240,9,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,
        1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
        1,41,1,41,1,42,1,42,1,43,1,43,3,43,290,8,43,1,43,3,43,293,8,43,1,
        44,4,44,296,8,44,11,44,12,44,297,1,45,1,45,5,45,302,8,45,10,45,12,
        45,305,9,45,1,46,1,46,4,46,309,8,46,11,46,12,46,310,1,47,1,47,3,
        47,315,8,47,1,47,1,47,1,48,1,48,1,48,5,48,322,8,48,10,48,12,48,325,
        9,48,1,48,1,48,1,48,1,49,4,49,331,8,49,11,49,12,49,332,1,49,1,49,
        1,50,1,50,5,50,339,8,50,10,50,12,50,342,9,50,1,51,1,51,1,51,1,52,
        1,52,1,52,5,52,350,8,52,10,52,12,52,353,9,52,1,52,1,52,1,52,3,52,
        358,8,52,1,52,1,52,1,53,1,53,1,53,5,53,365,8,53,10,53,12,53,368,
        9,53,1,53,1,53,1,53,1,53,3,53,374,8,53,1,53,1,53,1,54,1,54,1,54,
        1,55,1,55,1,55,1,55,3,55,385,8,55,0,0,56,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,0,93,0,95,0,97,46,99,47,101,
        48,103,49,105,50,107,51,109,0,111,0,1,0,15,1,0,10,10,2,0,10,10,12,
        13,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,5,0,10,10,12,13,34,
        34,39,39,92,92,3,0,8,9,12,13,32,32,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,1,10,10,6,0,10,10,12,13,34,34,39,39,92,92,
        98,98,3,0,12,13,39,39,92,92,1,0,39,39,1,0,34,34,7,0,39,39,92,92,
        98,98,102,102,110,110,114,114,116,116,399,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
        0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,113,1,
        0,0,0,3,120,1,0,0,0,5,125,1,0,0,0,7,132,1,0,0,0,9,139,1,0,0,0,11,
        143,1,0,0,0,13,151,1,0,0,0,15,156,1,0,0,0,17,160,1,0,0,0,19,166,
        1,0,0,0,21,169,1,0,0,0,23,175,1,0,0,0,25,184,1,0,0,0,27,187,1,0,
        0,0,29,192,1,0,0,0,31,197,1,0,0,0,33,203,1,0,0,0,35,207,1,0,0,0,
        37,211,1,0,0,0,39,215,1,0,0,0,41,218,1,0,0,0,43,220,1,0,0,0,45,222,
        1,0,0,0,47,224,1,0,0,0,49,226,1,0,0,0,51,228,1,0,0,0,53,230,1,0,
        0,0,55,232,1,0,0,0,57,243,1,0,0,0,59,248,1,0,0,0,61,254,1,0,0,0,
        63,257,1,0,0,0,65,260,1,0,0,0,67,262,1,0,0,0,69,265,1,0,0,0,71,267,
        1,0,0,0,73,270,1,0,0,0,75,274,1,0,0,0,77,277,1,0,0,0,79,279,1,0,
        0,0,81,281,1,0,0,0,83,283,1,0,0,0,85,285,1,0,0,0,87,287,1,0,0,0,
        89,295,1,0,0,0,91,299,1,0,0,0,93,306,1,0,0,0,95,312,1,0,0,0,97,318,
        1,0,0,0,99,330,1,0,0,0,101,336,1,0,0,0,103,343,1,0,0,0,105,346,1,
        0,0,0,107,361,1,0,0,0,109,377,1,0,0,0,111,384,1,0,0,0,113,114,5,
        110,0,0,114,115,5,117,0,0,115,116,5,109,0,0,116,117,5,98,0,0,117,
        118,5,101,0,0,118,119,5,114,0,0,119,2,1,0,0,0,120,121,5,98,0,0,121,
        122,5,111,0,0,122,123,5,111,0,0,123,124,5,108,0,0,124,4,1,0,0,0,
        125,126,5,115,0,0,126,127,5,116,0,0,127,128,5,114,0,0,128,129,5,
        105,0,0,129,130,5,110,0,0,130,131,5,103,0,0,131,6,1,0,0,0,132,133,
        5,114,0,0,133,134,5,101,0,0,134,135,5,116,0,0,135,136,5,117,0,0,
        136,137,5,114,0,0,137,138,5,110,0,0,138,8,1,0,0,0,139,140,5,118,
        0,0,140,141,5,97,0,0,141,142,5,114,0,0,142,10,1,0,0,0,143,144,5,
        100,0,0,144,145,5,121,0,0,145,146,5,110,0,0,146,147,5,97,0,0,147,
        148,5,109,0,0,148,149,5,105,0,0,149,150,5,99,0,0,150,12,1,0,0,0,
        151,152,5,102,0,0,152,153,5,117,0,0,153,154,5,110,0,0,154,155,5,
        99,0,0,155,14,1,0,0,0,156,157,5,102,0,0,157,158,5,111,0,0,158,159,
        5,114,0,0,159,16,1,0,0,0,160,161,5,117,0,0,161,162,5,110,0,0,162,
        163,5,116,0,0,163,164,5,105,0,0,164,165,5,108,0,0,165,18,1,0,0,0,
        166,167,5,98,0,0,167,168,5,121,0,0,168,20,1,0,0,0,169,170,5,98,0,
        0,170,171,5,114,0,0,171,172,5,101,0,0,172,173,5,97,0,0,173,174,5,
        107,0,0,174,22,1,0,0,0,175,176,5,99,0,0,176,177,5,111,0,0,177,178,
        5,110,0,0,178,179,5,116,0,0,179,180,5,105,0,0,180,181,5,110,0,0,
        181,182,5,117,0,0,182,183,5,101,0,0,183,24,1,0,0,0,184,185,5,105,
        0,0,185,186,5,102,0,0,186,26,1,0,0,0,187,188,5,101,0,0,188,189,5,
        108,0,0,189,190,5,115,0,0,190,191,5,101,0,0,191,28,1,0,0,0,192,193,
        5,101,0,0,193,194,5,108,0,0,194,195,5,105,0,0,195,196,5,102,0,0,
        196,30,1,0,0,0,197,198,5,98,0,0,198,199,5,101,0,0,199,200,5,103,
        0,0,200,201,5,105,0,0,201,202,5,110,0,0,202,32,1,0,0,0,203,204,5,
        101,0,0,204,205,5,110,0,0,205,206,5,100,0,0,206,34,1,0,0,0,207,208,
        5,110,0,0,208,209,5,111,0,0,209,210,5,116,0,0,210,36,1,0,0,0,211,
        212,5,97,0,0,212,213,5,110,0,0,213,214,5,100,0,0,214,38,1,0,0,0,
        215,216,5,111,0,0,216,217,5,114,0,0,217,40,1,0,0,0,218,219,5,43,
        0,0,219,42,1,0,0,0,220,221,5,45,0,0,221,44,1,0,0,0,222,223,5,42,
        0,0,223,46,1,0,0,0,224,225,5,47,0,0,225,48,1,0,0,0,226,227,5,37,
        0,0,227,50,1,0,0,0,228,229,5,61,0,0,229,52,1,0,0,0,230,231,7,0,0,
        0,231,54,1,0,0,0,232,233,5,35,0,0,233,234,5,35,0,0,234,238,1,0,0,
        0,235,237,8,1,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,
        0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,6,27,0,
        0,242,56,1,0,0,0,243,244,5,116,0,0,244,245,5,114,0,0,245,246,5,117,
        0,0,246,247,5,101,0,0,247,58,1,0,0,0,248,249,5,102,0,0,249,250,5,
        97,0,0,250,251,5,108,0,0,251,252,5,115,0,0,252,253,5,101,0,0,253,
        60,1,0,0,0,254,255,5,60,0,0,255,256,5,45,0,0,256,62,1,0,0,0,257,
        258,5,33,0,0,258,259,5,61,0,0,259,64,1,0,0,0,260,261,5,60,0,0,261,
        66,1,0,0,0,262,263,5,60,0,0,263,264,5,61,0,0,264,68,1,0,0,0,265,
        266,5,62,0,0,266,70,1,0,0,0,267,268,5,62,0,0,268,269,5,61,0,0,269,
        72,1,0,0,0,270,271,5,46,0,0,271,272,5,46,0,0,272,273,5,46,0,0,273,
        74,1,0,0,0,274,275,5,61,0,0,275,276,5,61,0,0,276,76,1,0,0,0,277,
        278,5,40,0,0,278,78,1,0,0,0,279,280,5,41,0,0,280,80,1,0,0,0,281,
        282,5,91,0,0,282,82,1,0,0,0,283,284,5,93,0,0,284,84,1,0,0,0,285,
        286,5,44,0,0,286,86,1,0,0,0,287,289,3,89,44,0,288,290,3,91,45,0,
        289,288,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,293,3,95,47,
        0,292,291,1,0,0,0,292,293,1,0,0,0,293,88,1,0,0,0,294,296,7,2,0,0,
        295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,
        298,90,1,0,0,0,299,303,5,46,0,0,300,302,7,2,0,0,301,300,1,0,0,0,
        302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,92,1,0,0,0,305,
        303,1,0,0,0,306,308,5,46,0,0,307,309,7,2,0,0,308,307,1,0,0,0,309,
        310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,94,1,0,0,0,312,314,
        7,3,0,0,313,315,7,4,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,316,
        1,0,0,0,316,317,3,89,44,0,317,96,1,0,0,0,318,323,5,34,0,0,319,322,
        3,111,55,0,320,322,8,5,0,0,321,319,1,0,0,0,321,320,1,0,0,0,322,325,
        1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,323,
        1,0,0,0,326,327,5,34,0,0,327,328,6,48,1,0,328,98,1,0,0,0,329,331,
        7,6,0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,
        1,0,0,0,333,334,1,0,0,0,334,335,6,49,0,0,335,100,1,0,0,0,336,340,
        7,7,0,0,337,339,7,8,0,0,338,337,1,0,0,0,339,342,1,0,0,0,340,338,
        1,0,0,0,340,341,1,0,0,0,341,102,1,0,0,0,342,340,1,0,0,0,343,344,
        9,0,0,0,344,345,6,51,2,0,345,104,1,0,0,0,346,351,5,34,0,0,347,350,
        8,5,0,0,348,350,3,111,55,0,349,347,1,0,0,0,349,348,1,0,0,0,350,353,
        1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,357,1,0,0,0,353,351,
        1,0,0,0,354,358,7,9,0,0,355,356,5,13,0,0,356,358,5,10,0,0,357,354,
        1,0,0,0,357,355,1,0,0,0,358,359,1,0,0,0,359,360,6,52,3,0,360,106,
        1,0,0,0,361,366,5,34,0,0,362,365,8,10,0,0,363,365,3,111,55,0,364,
        362,1,0,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,
        367,1,0,0,0,367,373,1,0,0,0,368,366,1,0,0,0,369,374,7,11,0,0,370,
        374,3,109,54,0,371,372,7,12,0,0,372,374,8,13,0,0,373,369,1,0,0,0,
        373,370,1,0,0,0,373,371,1,0,0,0,374,375,1,0,0,0,375,376,6,53,4,0,
        376,108,1,0,0,0,377,378,5,92,0,0,378,379,8,14,0,0,379,110,1,0,0,
        0,380,381,5,92,0,0,381,385,7,14,0,0,382,383,7,12,0,0,383,385,7,13,
        0,0,384,380,1,0,0,0,384,382,1,0,0,0,385,112,1,0,0,0,19,0,238,289,
        292,297,303,310,314,321,323,332,340,349,351,357,364,366,373,384,
        5,6,0,0,1,48,0,1,51,1,1,52,2,1,53,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    NEWLINE = 27
    COMMENT = 28
    TRUE = 29
    FALSE = 30
    ASSIGN = 31
    NOT_EQUAL = 32
    SMALLER = 33
    EQUALSMALLER = 34
    BIGGER = 35
    EQUALBIGGER = 36
    ELLIPSIS = 37
    EQUALITY = 38
    LPAREN = 39
    RPAREN = 40
    LBRACE = 41
    RBRACE = 42
    COMMA = 43
    NUM_LIT = 44
    INT = 45
    STR_LIT = 46
    WS = 47
    ID = 48
    ERROR_CHAR = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'number'", "'bool'", "'string'", "'return'", "'var'", "'dynamic'", 
            "'func'", "'for'", "'until'", "'by'", "'break'", "'continue'", 
            "'if'", "'else'", "'elif'", "'begin'", "'end'", "'not'", "'and'", 
            "'or'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'true'", 
            "'false'", "'<-'", "'!='", "'<'", "'<='", "'>'", "'>='", "'...'", 
            "'=='", "'('", "')'", "'['", "']'", "','" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "COMMENT", "TRUE", "FALSE", "ASSIGN", "NOT_EQUAL", 
            "SMALLER", "EQUALSMALLER", "BIGGER", "EQUALBIGGER", "ELLIPSIS", 
            "EQUALITY", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", 
            "NUM_LIT", "INT", "STR_LIT", "WS", "ID", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "NEWLINE", "COMMENT", "TRUE", "FALSE", "ASSIGN", "NOT_EQUAL", 
                  "SMALLER", "EQUALSMALLER", "BIGGER", "EQUALBIGGER", "ELLIPSIS", 
                  "EQUALITY", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", 
                  "NUM_LIT", "INT", "DEC_1", "DEC_2", "EXP", "STR_LIT", 
                  "WS", "ID", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "IllegalEscape", "ESCAPE_SEQ" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[48] = self.STR_LIT_action 
            actions[51] = self.ERROR_CHAR_action 
            actions[52] = self.UNCLOSE_STRING_action 
            actions[53] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[1:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[1:-1])
                else:
                    raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

            	raise IllegalEscape(self.text[1:])

     


