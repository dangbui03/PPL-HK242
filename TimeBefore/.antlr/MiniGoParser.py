# Generated from d:/HCMUT/PPL/2/BTL1/TimeBefore/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,68,839,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,1,0,5,0,140,8,0,10,0,12,0,143,9,0,
        1,0,1,0,1,0,1,1,1,1,1,1,5,1,151,8,1,10,1,12,1,154,9,1,1,1,1,1,5,
        1,158,8,1,10,1,12,1,161,9,1,3,1,163,8,1,1,2,1,2,1,2,1,2,1,2,1,2,
        3,2,171,8,2,1,3,1,3,1,3,3,3,176,8,3,1,3,1,3,3,3,180,8,3,1,3,1,3,
        3,3,184,8,3,1,3,5,3,187,8,3,10,3,12,3,190,9,3,1,4,1,4,1,4,3,4,195,
        8,4,1,4,1,4,1,4,1,4,3,4,201,8,4,1,4,5,4,204,8,4,10,4,12,4,207,9,
        4,1,5,1,5,1,5,1,5,1,5,5,5,214,8,5,10,5,12,5,217,9,5,1,5,3,5,220,
        8,5,1,5,1,5,1,5,3,5,225,8,5,1,5,5,5,228,8,5,10,5,12,5,231,9,5,1,
        6,1,6,1,6,1,6,3,6,237,8,6,1,7,1,7,1,7,1,7,3,7,243,8,7,1,7,5,7,246,
        8,7,10,7,12,7,249,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,260,
        8,8,1,8,1,8,1,8,3,8,265,8,8,1,8,5,8,268,8,8,10,8,12,8,271,9,8,1,
        9,1,9,1,9,1,9,3,9,277,8,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,
        286,8,11,10,11,12,11,289,9,11,1,11,1,11,5,11,293,8,11,10,11,12,11,
        296,9,11,1,11,3,11,299,8,11,1,11,1,11,1,11,3,11,304,8,11,1,11,5,
        11,307,8,11,10,11,12,11,310,9,11,1,12,1,12,1,12,1,12,3,12,316,8,
        12,1,13,1,13,1,13,1,13,1,13,3,13,323,8,13,1,13,3,13,326,8,13,1,13,
        5,13,329,8,13,10,13,12,13,332,9,13,1,14,1,14,1,14,1,14,1,14,1,14,
        3,14,340,8,14,1,15,1,15,3,15,344,8,15,1,16,1,16,1,16,1,16,1,16,1,
        16,3,16,352,8,16,1,16,1,16,1,16,3,16,357,8,16,1,16,5,16,360,8,16,
        10,16,12,16,363,9,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,371,8,17,
        1,18,1,18,1,18,1,19,1,19,5,19,378,8,19,10,19,12,19,381,9,19,1,19,
        3,19,384,8,19,1,19,1,19,5,19,388,8,19,10,19,12,19,391,9,19,1,20,
        1,20,1,20,1,20,3,20,397,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,3,21,407,8,21,1,22,1,22,5,22,411,8,22,10,22,12,22,414,9,22,
        1,23,1,23,1,23,1,23,3,23,420,8,23,1,23,5,23,423,8,23,10,23,12,23,
        426,9,23,1,24,1,24,1,24,3,24,431,8,24,1,24,3,24,434,8,24,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,444,8,25,10,25,12,25,447,9,
        25,1,26,1,26,1,26,1,26,3,26,453,8,26,1,27,1,27,1,28,1,28,1,28,1,
        28,1,28,5,28,462,8,28,10,28,12,28,465,9,28,1,28,1,28,3,28,469,8,
        28,1,28,3,28,472,8,28,1,28,5,28,475,8,28,10,28,12,28,478,9,28,1,
        29,1,29,1,29,1,29,3,29,484,8,29,1,30,1,30,1,30,1,30,1,30,1,30,5,
        30,492,8,30,10,30,12,30,495,9,30,1,30,1,30,1,31,1,31,5,31,501,8,
        31,10,31,12,31,504,9,31,1,31,1,31,1,32,1,32,1,32,5,32,511,8,32,10,
        32,12,32,514,9,32,1,32,1,32,5,32,518,8,32,10,32,12,32,521,9,32,1,
        32,1,32,1,32,1,32,1,32,1,32,5,32,529,8,32,10,32,12,32,532,9,32,1,
        32,1,32,5,32,536,8,32,10,32,12,32,539,9,32,1,32,1,32,1,32,1,32,1,
        32,1,32,5,32,547,8,32,10,32,12,32,550,9,32,1,32,1,32,5,32,554,8,
        32,10,32,12,32,557,9,32,3,32,559,8,32,1,33,1,33,3,33,563,8,33,1,
        34,1,34,1,34,1,34,1,35,1,35,1,35,3,35,572,8,35,1,35,5,35,575,8,35,
        10,35,12,35,578,9,35,1,36,3,36,581,8,36,1,36,1,36,3,36,585,8,36,
        1,36,1,36,1,36,3,36,590,8,36,1,36,5,36,593,8,36,10,36,12,36,596,
        9,36,1,37,1,37,1,37,3,37,601,8,37,1,37,5,37,604,8,37,10,37,12,37,
        607,9,37,1,38,1,38,3,38,611,8,38,1,38,1,38,3,38,615,8,38,1,38,5,
        38,618,8,38,10,38,12,38,621,9,38,1,39,1,39,1,39,1,39,1,39,3,39,628,
        8,39,1,40,1,40,1,40,1,40,1,40,1,40,5,40,636,8,40,10,40,12,40,639,
        9,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,647,8,41,10,41,12,41,650,
        9,41,1,42,1,42,1,42,1,42,1,42,1,42,5,42,658,8,42,10,42,12,42,661,
        9,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,669,8,43,10,43,12,43,672,
        9,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,680,8,44,10,44,12,44,683,
        9,44,1,45,1,45,1,45,3,45,688,8,45,1,46,1,46,1,46,3,46,693,8,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,705,8,46,1,
        46,3,46,708,8,46,5,46,710,8,46,10,46,12,46,713,9,46,1,47,1,47,1,
        47,1,47,1,47,1,47,3,47,721,8,47,1,48,1,48,1,48,3,48,726,8,48,1,48,
        1,48,3,48,730,8,48,1,49,1,49,1,49,1,49,3,49,736,8,49,1,49,3,49,739,
        8,49,1,50,1,50,1,50,3,50,744,8,50,1,51,1,51,1,52,1,52,3,52,750,8,
        52,1,53,1,53,1,54,1,54,1,55,1,55,3,55,758,8,55,1,56,1,56,1,56,3,
        56,763,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,771,8,56,1,57,1,57,
        1,57,1,57,1,57,1,57,1,57,3,57,780,8,57,1,58,1,58,1,58,3,58,785,8,
        58,1,58,1,58,1,59,1,59,3,59,791,8,59,1,59,1,59,1,59,1,59,3,59,797,
        8,59,3,59,799,8,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,3,61,808,8,
        61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,816,8,62,1,62,1,62,3,62,820,
        8,62,3,62,822,8,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,
        1,67,1,68,3,68,835,8,68,1,68,1,68,1,68,0,7,50,80,82,84,86,88,92,
        69,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,0,7,2,0,1,1,40,44,1,0,26,27,1,0,28,30,
        2,0,25,25,27,27,1,0,13,16,1,0,56,59,1,0,23,24,901,0,141,1,0,0,0,
        2,162,1,0,0,0,4,170,1,0,0,0,6,172,1,0,0,0,8,191,1,0,0,0,10,208,1,
        0,0,0,12,236,1,0,0,0,14,238,1,0,0,0,16,250,1,0,0,0,18,276,1,0,0,
        0,20,278,1,0,0,0,22,281,1,0,0,0,24,315,1,0,0,0,26,317,1,0,0,0,28,
        339,1,0,0,0,30,341,1,0,0,0,32,345,1,0,0,0,34,370,1,0,0,0,36,372,
        1,0,0,0,38,375,1,0,0,0,40,396,1,0,0,0,42,406,1,0,0,0,44,408,1,0,
        0,0,46,415,1,0,0,0,48,427,1,0,0,0,50,435,1,0,0,0,52,452,1,0,0,0,
        54,454,1,0,0,0,56,456,1,0,0,0,58,483,1,0,0,0,60,485,1,0,0,0,62,498,
        1,0,0,0,64,558,1,0,0,0,66,562,1,0,0,0,68,564,1,0,0,0,70,568,1,0,
        0,0,72,580,1,0,0,0,74,597,1,0,0,0,76,608,1,0,0,0,78,627,1,0,0,0,
        80,629,1,0,0,0,82,640,1,0,0,0,84,651,1,0,0,0,86,662,1,0,0,0,88,673,
        1,0,0,0,90,687,1,0,0,0,92,692,1,0,0,0,94,720,1,0,0,0,96,722,1,0,
        0,0,98,731,1,0,0,0,100,743,1,0,0,0,102,745,1,0,0,0,104,749,1,0,0,
        0,106,751,1,0,0,0,108,753,1,0,0,0,110,755,1,0,0,0,112,770,1,0,0,
        0,114,779,1,0,0,0,116,781,1,0,0,0,118,798,1,0,0,0,120,800,1,0,0,
        0,122,804,1,0,0,0,124,821,1,0,0,0,126,823,1,0,0,0,128,825,1,0,0,
        0,130,827,1,0,0,0,132,829,1,0,0,0,134,831,1,0,0,0,136,834,1,0,0,
        0,138,140,3,136,68,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,
        0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,3,2,
        1,0,145,146,5,0,0,1,146,1,1,0,0,0,147,148,3,4,2,0,148,152,3,2,1,
        0,149,151,3,136,68,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,
        0,0,152,153,1,0,0,0,153,163,1,0,0,0,154,152,1,0,0,0,155,159,3,4,
        2,0,156,158,3,136,68,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,
        0,0,0,159,160,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,162,147,1,
        0,0,0,162,155,1,0,0,0,163,3,1,0,0,0,164,171,3,6,3,0,165,171,3,8,
        4,0,166,171,3,32,16,0,167,171,3,16,8,0,168,171,3,10,5,0,169,171,
        3,22,11,0,170,164,1,0,0,0,170,165,1,0,0,0,170,166,1,0,0,0,170,167,
        1,0,0,0,170,168,1,0,0,0,170,169,1,0,0,0,171,5,1,0,0,0,172,173,5,
        18,0,0,173,175,5,55,0,0,174,176,3,100,50,0,175,174,1,0,0,0,175,176,
        1,0,0,0,176,179,1,0,0,0,177,178,5,39,0,0,178,180,3,80,40,0,179,177,
        1,0,0,0,179,180,1,0,0,0,180,183,1,0,0,0,181,184,5,53,0,0,182,184,
        3,136,68,0,183,181,1,0,0,0,183,182,1,0,0,0,184,188,1,0,0,0,185,187,
        3,136,68,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,
        1,0,0,0,189,7,1,0,0,0,190,188,1,0,0,0,191,192,5,17,0,0,192,194,5,
        55,0,0,193,195,3,100,50,0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,
        1,0,0,0,196,197,5,39,0,0,197,200,3,80,40,0,198,201,5,53,0,0,199,
        201,3,136,68,0,200,198,1,0,0,0,200,199,1,0,0,0,201,205,1,0,0,0,202,
        204,3,136,68,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,
        206,1,0,0,0,206,9,1,0,0,0,207,205,1,0,0,0,208,209,5,10,0,0,209,210,
        5,55,0,0,210,211,5,11,0,0,211,215,5,49,0,0,212,214,3,136,68,0,213,
        212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,
        219,1,0,0,0,217,215,1,0,0,0,218,220,3,12,6,0,219,218,1,0,0,0,219,
        220,1,0,0,0,220,221,1,0,0,0,221,224,5,50,0,0,222,225,5,53,0,0,223,
        225,3,136,68,0,224,222,1,0,0,0,224,223,1,0,0,0,225,229,1,0,0,0,226,
        228,3,136,68,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,
        230,1,0,0,0,230,11,1,0,0,0,231,229,1,0,0,0,232,233,3,14,7,0,233,
        234,3,12,6,0,234,237,1,0,0,0,235,237,3,14,7,0,236,232,1,0,0,0,236,
        235,1,0,0,0,237,13,1,0,0,0,238,239,5,55,0,0,239,242,3,100,50,0,240,
        243,5,53,0,0,241,243,3,136,68,0,242,240,1,0,0,0,242,241,1,0,0,0,
        243,247,1,0,0,0,244,246,3,136,68,0,245,244,1,0,0,0,246,249,1,0,0,
        0,247,245,1,0,0,0,247,248,1,0,0,0,248,15,1,0,0,0,249,247,1,0,0,0,
        250,251,5,9,0,0,251,252,5,47,0,0,252,253,3,18,9,0,253,254,5,48,0,
        0,254,255,5,55,0,0,255,256,5,47,0,0,256,257,3,34,17,0,257,259,5,
        48,0,0,258,260,3,100,50,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,
        1,0,0,0,261,264,3,38,19,0,262,265,5,53,0,0,263,265,3,136,68,0,264,
        262,1,0,0,0,264,263,1,0,0,0,264,265,1,0,0,0,265,269,1,0,0,0,266,
        268,3,136,68,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,
        270,1,0,0,0,270,17,1,0,0,0,271,269,1,0,0,0,272,273,3,20,10,0,273,
        274,3,18,9,0,274,277,1,0,0,0,275,277,3,20,10,0,276,272,1,0,0,0,276,
        275,1,0,0,0,277,19,1,0,0,0,278,279,5,55,0,0,279,280,3,104,52,0,280,
        21,1,0,0,0,281,282,5,10,0,0,282,283,5,55,0,0,283,287,5,12,0,0,284,
        286,3,136,68,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,
        288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,294,5,49,0,0,291,
        293,3,136,68,0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,
        295,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,297,299,3,24,12,0,298,
        297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,303,5,50,0,0,301,
        304,5,53,0,0,302,304,3,136,68,0,303,301,1,0,0,0,303,302,1,0,0,0,
        303,304,1,0,0,0,304,308,1,0,0,0,305,307,3,136,68,0,306,305,1,0,0,
        0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,23,1,0,0,0,
        310,308,1,0,0,0,311,312,3,26,13,0,312,313,3,24,12,0,313,316,1,0,
        0,0,314,316,3,26,13,0,315,311,1,0,0,0,315,314,1,0,0,0,316,25,1,0,
        0,0,317,318,5,55,0,0,318,319,5,47,0,0,319,320,3,28,14,0,320,322,
        5,48,0,0,321,323,3,100,50,0,322,321,1,0,0,0,322,323,1,0,0,0,323,
        325,1,0,0,0,324,326,5,53,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,
        330,1,0,0,0,327,329,3,136,68,0,328,327,1,0,0,0,329,332,1,0,0,0,330,
        328,1,0,0,0,330,331,1,0,0,0,331,27,1,0,0,0,332,330,1,0,0,0,333,334,
        3,30,15,0,334,335,5,54,0,0,335,336,3,28,14,0,336,340,1,0,0,0,337,
        340,3,30,15,0,338,340,1,0,0,0,339,333,1,0,0,0,339,337,1,0,0,0,339,
        338,1,0,0,0,340,29,1,0,0,0,341,343,5,55,0,0,342,344,3,100,50,0,343,
        342,1,0,0,0,343,344,1,0,0,0,344,31,1,0,0,0,345,346,5,9,0,0,346,347,
        5,55,0,0,347,348,5,47,0,0,348,349,3,34,17,0,349,351,5,48,0,0,350,
        352,3,100,50,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,
        356,3,38,19,0,354,357,5,53,0,0,355,357,3,136,68,0,356,354,1,0,0,
        0,356,355,1,0,0,0,356,357,1,0,0,0,357,361,1,0,0,0,358,360,3,136,
        68,0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,
        0,0,362,33,1,0,0,0,363,361,1,0,0,0,364,365,3,36,18,0,365,366,5,54,
        0,0,366,367,3,34,17,0,367,371,1,0,0,0,368,371,3,36,18,0,369,371,
        1,0,0,0,370,364,1,0,0,0,370,368,1,0,0,0,370,369,1,0,0,0,371,35,1,
        0,0,0,372,373,5,55,0,0,373,374,3,100,50,0,374,37,1,0,0,0,375,379,
        5,49,0,0,376,378,3,136,68,0,377,376,1,0,0,0,378,381,1,0,0,0,379,
        377,1,0,0,0,379,380,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,382,
        384,3,40,20,0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,
        389,5,50,0,0,386,388,3,136,68,0,387,386,1,0,0,0,388,391,1,0,0,0,
        389,387,1,0,0,0,389,390,1,0,0,0,390,39,1,0,0,0,391,389,1,0,0,0,392,
        393,3,42,21,0,393,394,3,40,20,0,394,397,1,0,0,0,395,397,3,42,21,
        0,396,392,1,0,0,0,396,395,1,0,0,0,397,41,1,0,0,0,398,407,3,44,22,
        0,399,407,3,46,23,0,400,407,3,56,28,0,401,407,3,64,32,0,402,407,
        3,70,35,0,403,407,3,74,37,0,404,407,3,72,36,0,405,407,3,76,38,0,
        406,398,1,0,0,0,406,399,1,0,0,0,406,400,1,0,0,0,406,401,1,0,0,0,
        406,402,1,0,0,0,406,403,1,0,0,0,406,404,1,0,0,0,406,405,1,0,0,0,
        407,43,1,0,0,0,408,412,3,4,2,0,409,411,3,136,68,0,410,409,1,0,0,
        0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,45,1,0,0,0,
        414,412,1,0,0,0,415,416,3,50,25,0,416,417,3,54,27,0,417,419,3,80,
        40,0,418,420,5,53,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,424,1,
        0,0,0,421,423,3,136,68,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,
        1,0,0,0,424,425,1,0,0,0,425,47,1,0,0,0,426,424,1,0,0,0,427,430,5,
        55,0,0,428,429,5,45,0,0,429,431,5,55,0,0,430,428,1,0,0,0,430,431,
        1,0,0,0,431,433,1,0,0,0,432,434,3,112,56,0,433,432,1,0,0,0,433,434,
        1,0,0,0,434,49,1,0,0,0,435,436,6,25,-1,0,436,437,5,55,0,0,437,445,
        1,0,0,0,438,439,10,2,0,0,439,440,5,45,0,0,440,444,5,55,0,0,441,442,
        10,1,0,0,442,444,3,112,56,0,443,438,1,0,0,0,443,441,1,0,0,0,444,
        447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,51,1,0,0,0,447,445,
        1,0,0,0,448,449,3,50,25,0,449,450,3,52,26,0,450,453,1,0,0,0,451,
        453,3,50,25,0,452,448,1,0,0,0,452,451,1,0,0,0,453,53,1,0,0,0,454,
        455,7,0,0,0,455,55,1,0,0,0,456,457,5,5,0,0,457,458,5,47,0,0,458,
        459,3,80,40,0,459,463,5,48,0,0,460,462,3,136,68,0,461,460,1,0,0,
        0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,466,1,0,0,
        0,465,463,1,0,0,0,466,468,3,38,19,0,467,469,3,58,29,0,468,467,1,
        0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,472,3,62,31,0,471,470,
        1,0,0,0,471,472,1,0,0,0,472,476,1,0,0,0,473,475,3,136,68,0,474,473,
        1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,57,1,
        0,0,0,478,476,1,0,0,0,479,480,3,60,30,0,480,481,3,58,29,0,481,484,
        1,0,0,0,482,484,3,60,30,0,483,479,1,0,0,0,483,482,1,0,0,0,484,59,
        1,0,0,0,485,486,5,6,0,0,486,487,5,5,0,0,487,488,5,47,0,0,488,489,
        3,80,40,0,489,493,5,48,0,0,490,492,3,136,68,0,491,490,1,0,0,0,492,
        495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,
        493,1,0,0,0,496,497,3,38,19,0,497,61,1,0,0,0,498,502,5,6,0,0,499,
        501,3,136,68,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,
        503,1,0,0,0,503,505,1,0,0,0,504,502,1,0,0,0,505,506,3,38,19,0,506,
        63,1,0,0,0,507,508,5,7,0,0,508,512,3,80,40,0,509,511,3,136,68,0,
        510,509,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,
        513,515,1,0,0,0,514,512,1,0,0,0,515,519,3,38,19,0,516,518,3,136,
        68,0,517,516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,
        0,0,520,559,1,0,0,0,521,519,1,0,0,0,522,523,5,7,0,0,523,524,3,66,
        33,0,524,525,3,80,40,0,525,526,5,53,0,0,526,530,3,46,23,0,527,529,
        3,136,68,0,528,527,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,
        1,0,0,0,531,533,1,0,0,0,532,530,1,0,0,0,533,537,3,38,19,0,534,536,
        3,136,68,0,535,534,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,
        1,0,0,0,538,559,1,0,0,0,539,537,1,0,0,0,540,541,5,7,0,0,541,542,
        5,55,0,0,542,543,5,54,0,0,543,544,3,68,34,0,544,548,3,80,40,0,545,
        547,3,136,68,0,546,545,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,
        549,1,0,0,0,549,551,1,0,0,0,550,548,1,0,0,0,551,555,3,38,19,0,552,
        554,3,136,68,0,553,552,1,0,0,0,554,557,1,0,0,0,555,553,1,0,0,0,555,
        556,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,558,507,1,0,0,0,558,
        522,1,0,0,0,558,540,1,0,0,0,559,65,1,0,0,0,560,563,3,46,23,0,561,
        563,3,6,3,0,562,560,1,0,0,0,562,561,1,0,0,0,563,67,1,0,0,0,564,565,
        5,55,0,0,565,566,5,1,0,0,566,567,5,21,0,0,567,69,1,0,0,0,568,571,
        5,20,0,0,569,572,5,53,0,0,570,572,3,136,68,0,571,569,1,0,0,0,571,
        570,1,0,0,0,572,576,1,0,0,0,573,575,3,136,68,0,574,573,1,0,0,0,575,
        578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,71,1,0,0,0,578,576,
        1,0,0,0,579,581,3,50,25,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,
        1,0,0,0,582,584,5,47,0,0,583,585,3,78,39,0,584,583,1,0,0,0,584,585,
        1,0,0,0,585,586,1,0,0,0,586,589,5,48,0,0,587,590,5,53,0,0,588,590,
        3,136,68,0,589,587,1,0,0,0,589,588,1,0,0,0,590,594,1,0,0,0,591,593,
        3,136,68,0,592,591,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,
        1,0,0,0,595,73,1,0,0,0,596,594,1,0,0,0,597,600,5,19,0,0,598,601,
        5,53,0,0,599,601,3,136,68,0,600,598,1,0,0,0,600,599,1,0,0,0,601,
        605,1,0,0,0,602,604,3,136,68,0,603,602,1,0,0,0,604,607,1,0,0,0,605,
        603,1,0,0,0,605,606,1,0,0,0,606,75,1,0,0,0,607,605,1,0,0,0,608,610,
        5,8,0,0,609,611,3,80,40,0,610,609,1,0,0,0,610,611,1,0,0,0,611,614,
        1,0,0,0,612,615,5,53,0,0,613,615,3,136,68,0,614,612,1,0,0,0,614,
        613,1,0,0,0,615,619,1,0,0,0,616,618,3,136,68,0,617,616,1,0,0,0,618,
        621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,77,1,0,0,0,621,619,
        1,0,0,0,622,623,3,80,40,0,623,624,5,54,0,0,624,625,3,78,39,0,625,
        628,1,0,0,0,626,628,3,80,40,0,627,622,1,0,0,0,627,626,1,0,0,0,628,
        79,1,0,0,0,629,630,6,40,-1,0,630,631,3,82,41,0,631,637,1,0,0,0,632,
        633,10,2,0,0,633,634,5,37,0,0,634,636,3,82,41,0,635,632,1,0,0,0,
        636,639,1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,81,1,0,0,0,639,
        637,1,0,0,0,640,641,6,41,-1,0,641,642,3,84,42,0,642,648,1,0,0,0,
        643,644,10,2,0,0,644,645,5,38,0,0,645,647,3,84,42,0,646,643,1,0,
        0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,83,1,0,0,
        0,650,648,1,0,0,0,651,652,6,42,-1,0,652,653,3,86,43,0,653,659,1,
        0,0,0,654,655,10,2,0,0,655,656,5,4,0,0,656,658,3,86,43,0,657,654,
        1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,85,1,
        0,0,0,661,659,1,0,0,0,662,663,6,43,-1,0,663,664,3,88,44,0,664,670,
        1,0,0,0,665,666,10,2,0,0,666,667,7,1,0,0,667,669,3,88,44,0,668,665,
        1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,87,1,
        0,0,0,672,670,1,0,0,0,673,674,6,44,-1,0,674,675,3,90,45,0,675,681,
        1,0,0,0,676,677,10,2,0,0,677,678,7,2,0,0,678,680,3,90,45,0,679,676,
        1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,89,1,
        0,0,0,683,681,1,0,0,0,684,685,7,3,0,0,685,688,3,90,45,0,686,688,
        3,92,46,0,687,684,1,0,0,0,687,686,1,0,0,0,688,91,1,0,0,0,689,690,
        6,46,-1,0,690,693,3,96,48,0,691,693,3,94,47,0,692,689,1,0,0,0,692,
        691,1,0,0,0,693,711,1,0,0,0,694,695,10,4,0,0,695,696,5,51,0,0,696,
        697,3,80,40,0,697,698,5,52,0,0,698,710,1,0,0,0,699,700,10,3,0,0,
        700,701,5,45,0,0,701,707,5,55,0,0,702,704,5,47,0,0,703,705,3,78,
        39,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,708,5,48,
        0,0,707,702,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,694,1,0,
        0,0,709,699,1,0,0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,
        0,0,712,93,1,0,0,0,713,711,1,0,0,0,714,721,3,114,57,0,715,721,5,
        55,0,0,716,717,5,47,0,0,717,718,3,80,40,0,718,719,5,48,0,0,719,721,
        1,0,0,0,720,714,1,0,0,0,720,715,1,0,0,0,720,716,1,0,0,0,721,95,1,
        0,0,0,722,723,5,55,0,0,723,725,5,47,0,0,724,726,3,78,39,0,725,724,
        1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,729,5,48,0,0,728,730,
        3,136,68,0,729,728,1,0,0,0,729,730,1,0,0,0,730,97,1,0,0,0,731,732,
        5,45,0,0,732,738,5,55,0,0,733,735,5,47,0,0,734,736,3,78,39,0,735,
        734,1,0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,737,739,5,48,0,0,738,
        733,1,0,0,0,738,739,1,0,0,0,739,99,1,0,0,0,740,744,3,102,51,0,741,
        744,3,104,52,0,742,744,3,110,55,0,743,740,1,0,0,0,743,741,1,0,0,
        0,743,742,1,0,0,0,744,101,1,0,0,0,745,746,7,4,0,0,746,103,1,0,0,
        0,747,750,3,106,53,0,748,750,3,108,54,0,749,747,1,0,0,0,749,748,
        1,0,0,0,750,105,1,0,0,0,751,752,5,55,0,0,752,107,1,0,0,0,753,754,
        5,55,0,0,754,109,1,0,0,0,755,757,3,112,56,0,756,758,3,100,50,0,757,
        756,1,0,0,0,757,758,1,0,0,0,758,111,1,0,0,0,759,762,5,51,0,0,760,
        763,5,56,0,0,761,763,3,116,58,0,762,760,1,0,0,0,762,761,1,0,0,0,
        763,764,1,0,0,0,764,765,5,52,0,0,765,771,3,112,56,0,766,767,5,51,
        0,0,767,768,3,126,63,0,768,769,5,52,0,0,769,771,1,0,0,0,770,759,
        1,0,0,0,770,766,1,0,0,0,771,113,1,0,0,0,772,780,3,126,63,0,773,780,
        3,128,64,0,774,780,3,132,66,0,775,780,3,130,65,0,776,780,3,122,61,
        0,777,780,3,116,58,0,778,780,3,134,67,0,779,772,1,0,0,0,779,773,
        1,0,0,0,779,774,1,0,0,0,779,775,1,0,0,0,779,776,1,0,0,0,779,777,
        1,0,0,0,779,778,1,0,0,0,780,115,1,0,0,0,781,782,5,55,0,0,782,784,
        5,49,0,0,783,785,3,118,59,0,784,783,1,0,0,0,784,785,1,0,0,0,785,
        786,1,0,0,0,786,787,5,50,0,0,787,117,1,0,0,0,788,790,3,120,60,0,
        789,791,3,136,68,0,790,789,1,0,0,0,790,791,1,0,0,0,791,799,1,0,0,
        0,792,793,3,120,60,0,793,794,5,54,0,0,794,796,3,118,59,0,795,797,
        3,136,68,0,796,795,1,0,0,0,796,797,1,0,0,0,797,799,1,0,0,0,798,788,
        1,0,0,0,798,792,1,0,0,0,799,119,1,0,0,0,800,801,5,55,0,0,801,802,
        5,46,0,0,802,803,3,80,40,0,803,121,1,0,0,0,804,805,3,110,55,0,805,
        807,5,49,0,0,806,808,3,124,62,0,807,806,1,0,0,0,807,808,1,0,0,0,
        808,809,1,0,0,0,809,810,5,50,0,0,810,123,1,0,0,0,811,812,5,49,0,
        0,812,822,3,124,62,0,813,815,3,78,39,0,814,816,5,50,0,0,815,814,
        1,0,0,0,815,816,1,0,0,0,816,819,1,0,0,0,817,818,5,54,0,0,818,820,
        3,124,62,0,819,817,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,811,
        1,0,0,0,821,813,1,0,0,0,822,125,1,0,0,0,823,824,7,5,0,0,824,127,
        1,0,0,0,825,826,5,60,0,0,826,129,1,0,0,0,827,828,7,6,0,0,828,131,
        1,0,0,0,829,830,5,61,0,0,830,133,1,0,0,0,831,832,5,22,0,0,832,135,
        1,0,0,0,833,835,5,2,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,
        1,0,0,0,836,837,5,3,0,0,837,137,1,0,0,0,109,141,152,159,162,170,
        175,179,183,188,194,200,205,215,219,224,229,236,242,247,259,264,
        269,276,287,294,298,303,308,315,322,325,330,339,343,351,356,361,
        370,379,383,389,396,406,412,419,424,430,433,443,445,452,463,468,
        471,476,483,493,502,512,519,530,537,548,555,558,562,571,576,580,
        584,589,594,600,605,610,614,619,627,637,648,659,670,681,687,692,
        704,707,709,711,720,725,729,735,738,743,749,757,762,770,779,784,
        790,796,798,807,815,819,821,834
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "':='", "'\\r'", "'\\n'", "<INVALID>", 
                     "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", 
                     "'struct'", "'interface'", "'string'", "'int'", "'float'", 
                     "'boolean'", "'const'", "'var'", "'continue'", "'break'", 
                     "'range'", "'nil'", "'true'", "'false'", "'!'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", 
                     "'>'", "'<='", "'>='", "'||'", "'&&'", "'='", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'.'", "':'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "REL", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
                      "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
                      "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", 
                      "TRUE", "FALSE", "NOT", "ADD", "MINUS", "MUL", "DIV", 
                      "MOD", "EQUAL", "DIFF", "LT", "GT", "LE", "GE", "OR", 
                      "AND", "ASSIGN", "ADD_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
                      "DIV_ASSIGN", "REM_ASSIGN", "DOT", "COLON", "LPAREN", 
                      "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                      "SEMI", "COMMA", "ID", "DEC_LIT", "BIN_LIT", "OCT_LIT", 
                      "HEX_LIT", "FLOAT_LIT", "STR_LIT", "BOOL_LIT", "WS", 
                      "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "UNCLOSE_STRING", 
                      "ILLEGAL_ESCAPE" ]

    RULE_program = 0
    RULE_decllist = 1
    RULE_decl = 2
    RULE_variable_decl = 3
    RULE_const_decl = 4
    RULE_struct_decl = 5
    RULE_struct_fields = 6
    RULE_struct_field = 7
    RULE_method_decl = 8
    RULE_method_para_list = 9
    RULE_method_para = 10
    RULE_interface_decl = 11
    RULE_interface_method_list = 12
    RULE_interface_method = 13
    RULE_interface_para_list = 14
    RULE_interface_para = 15
    RULE_func_decl = 16
    RULE_list_para = 17
    RULE_para = 18
    RULE_block_statement = 19
    RULE_list_statement = 20
    RULE_statement = 21
    RULE_declared_statement = 22
    RULE_assign_statement = 23
    RULE_lhs2 = 24
    RULE_lhs = 25
    RULE_lhs_list = 26
    RULE_ass_operator = 27
    RULE_if_statement = 28
    RULE_list_else_if_statement = 29
    RULE_else_if_statement = 30
    RULE_else_statement = 31
    RULE_for_statement = 32
    RULE_init_for_statement = 33
    RULE_value_assign = 34
    RULE_break_statement = 35
    RULE_call_statement = 36
    RULE_continue_statement = 37
    RULE_return_statement = 38
    RULE_list_expr = 39
    RULE_expr = 40
    RULE_and_expr = 41
    RULE_rela_expr = 42
    RULE_add_expr = 43
    RULE_mul_expr = 44
    RULE_unary_expr = 45
    RULE_primary_expr = 46
    RULE_exprd = 47
    RULE_func_call = 48
    RULE_method_call = 49
    RULE_types = 50
    RULE_primitive_types = 51
    RULE_composite_types = 52
    RULE_struct_type = 53
    RULE_interface_type = 54
    RULE_arr_type = 55
    RULE_index_operator = 56
    RULE_literals = 57
    RULE_struct_lit = 58
    RULE_list_field = 59
    RULE_field = 60
    RULE_arr_lit = 61
    RULE_arr_list = 62
    RULE_int_lit = 63
    RULE_float_lit = 64
    RULE_bool_lit = 65
    RULE_str_lit = 66
    RULE_nil_lit = 67
    RULE_newline = 68

    ruleNames =  [ "program", "decllist", "decl", "variable_decl", "const_decl", 
                   "struct_decl", "struct_fields", "struct_field", "method_decl", 
                   "method_para_list", "method_para", "interface_decl", 
                   "interface_method_list", "interface_method", "interface_para_list", 
                   "interface_para", "func_decl", "list_para", "para", "block_statement", 
                   "list_statement", "statement", "declared_statement", 
                   "assign_statement", "lhs2", "lhs", "lhs_list", "ass_operator", 
                   "if_statement", "list_else_if_statement", "else_if_statement", 
                   "else_statement", "for_statement", "init_for_statement", 
                   "value_assign", "break_statement", "call_statement", 
                   "continue_statement", "return_statement", "list_expr", 
                   "expr", "and_expr", "rela_expr", "add_expr", "mul_expr", 
                   "unary_expr", "primary_expr", "exprd", "func_call", "method_call", 
                   "types", "primitive_types", "composite_types", "struct_type", 
                   "interface_type", "arr_type", "index_operator", "literals", 
                   "struct_lit", "list_field", "field", "arr_lit", "arr_list", 
                   "int_lit", "float_lit", "bool_lit", "str_lit", "nil_lit", 
                   "newline" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    REL=4
    IF=5
    ELSE=6
    FOR=7
    RETURN=8
    FUNC=9
    TYPE=10
    STRUCT=11
    INTERFACE=12
    STRING=13
    INT=14
    FLOAT=15
    BOOLEAN=16
    CONST=17
    VAR=18
    CONTINUE=19
    BREAK=20
    RANGE=21
    NIL=22
    TRUE=23
    FALSE=24
    NOT=25
    ADD=26
    MINUS=27
    MUL=28
    DIV=29
    MOD=30
    EQUAL=31
    DIFF=32
    LT=33
    GT=34
    LE=35
    GE=36
    OR=37
    AND=38
    ASSIGN=39
    ADD_ASSIGN=40
    MINUS_ASSIGN=41
    MULT_ASSIGN=42
    DIV_ASSIGN=43
    REM_ASSIGN=44
    DOT=45
    COLON=46
    LPAREN=47
    RPAREN=48
    LBRACE=49
    RBRACE=50
    LBRACK=51
    RBRACK=52
    SEMI=53
    COMMA=54
    ID=55
    DEC_LIT=56
    BIN_LIT=57
    OCT_LIT=58
    HEX_LIT=59
    FLOAT_LIT=60
    STR_LIT=61
    BOOL_LIT=62
    WS=63
    LINE_COMMENT=64
    BLOCK_COMMENT=65
    ERROR_CHAR=66
    UNCLOSE_STRING=67
    ILLEGAL_ESCAPE=68

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decllist(self):
            return self.getTypedRuleContext(MiniGoParser.DecllistContext,0)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_program




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 138
                self.newline()
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 144
            self.decllist()
            self.state = 145
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecllistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decl(self):
            return self.getTypedRuleContext(MiniGoParser.DeclContext,0)


        def decllist(self):
            return self.getTypedRuleContext(MiniGoParser.DecllistContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decllist




    def decllist(self):

        localctx = MiniGoParser.DecllistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_decllist)
        try:
            self.state = 162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 147
                self.decl()
                self.state = 148
                self.decllist()
                self.state = 152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 149
                        self.newline() 
                    self.state = 154
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 155
                self.decl()
                self.state = 159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 156
                        self.newline() 
                    self.state = 161
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Variable_declContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def func_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Func_declContext,0)


        def method_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declContext,0)


        def struct_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declContext,0)


        def interface_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decl




    def decl(self):

        localctx = MiniGoParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_decl)
        try:
            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 164
                self.variable_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 165
                self.const_decl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 166
                self.func_decl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 167
                self.method_decl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 168
                self.struct_decl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 169
                self.interface_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_variable_decl




    def variable_decl(self):

        localctx = MiniGoParser.Variable_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_variable_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(MiniGoParser.VAR)
            self.state = 173
            self.match(MiniGoParser.ID)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596832772096) != 0):
                self.state = 174
                self.types()


            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 177
                self.match(MiniGoParser.ASSIGN)
                self.state = 178
                self.expr(0)


            self.state = 183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 181
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 182
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 188
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 185
                    self.newline() 
                self.state = 190
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_const_decl




    def const_decl(self):

        localctx = MiniGoParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_const_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.match(MiniGoParser.CONST)
            self.state = 192
            self.match(MiniGoParser.ID)
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596832772096) != 0):
                self.state = 193
                self.types()


            self.state = 196
            self.match(MiniGoParser.ASSIGN)
            self.state = 197
            self.expr(0)
            self.state = 200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 198
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 199
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 205
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 202
                    self.newline() 
                self.state = 207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def struct_fields(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_fieldsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_decl




    def struct_decl(self):

        localctx = MiniGoParser.Struct_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_struct_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(MiniGoParser.TYPE)
            self.state = 209
            self.match(MiniGoParser.ID)
            self.state = 210
            self.match(MiniGoParser.STRUCT)
            self.state = 211
            self.match(MiniGoParser.LBRACE)
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 212
                self.newline()
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 218
                self.struct_fields()


            self.state = 221
            self.match(MiniGoParser.RBRACE)
            self.state = 224
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 222
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 223
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 226
                    self.newline() 
                self.state = 231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_fieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_field(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_fieldContext,0)


        def struct_fields(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_fieldsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_fields




    def struct_fields(self):

        localctx = MiniGoParser.Struct_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_struct_fields)
        try:
            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 232
                self.struct_field()
                self.state = 233
                self.struct_fields()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 235
                self.struct_field()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field




    def struct_field(self):

        localctx = MiniGoParser.Struct_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_struct_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(MiniGoParser.ID)
            self.state = 239
            self.types()
            self.state = 242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 240
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 241
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 244
                self.newline()
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LPAREN)
            else:
                return self.getToken(MiniGoParser.LPAREN, i)

        def method_para_list(self):
            return self.getTypedRuleContext(MiniGoParser.Method_para_listContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RPAREN)
            else:
                return self.getToken(MiniGoParser.RPAREN, i)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def list_para(self):
            return self.getTypedRuleContext(MiniGoParser.List_paraContext,0)


        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_decl




    def method_decl(self):

        localctx = MiniGoParser.Method_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_method_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(MiniGoParser.FUNC)
            self.state = 251
            self.match(MiniGoParser.LPAREN)
            self.state = 252
            self.method_para_list()
            self.state = 253
            self.match(MiniGoParser.RPAREN)
            self.state = 254
            self.match(MiniGoParser.ID)
            self.state = 255
            self.match(MiniGoParser.LPAREN)
            self.state = 256
            self.list_para()
            self.state = 257
            self.match(MiniGoParser.RPAREN)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596832772096) != 0):
                self.state = 258
                self.types()


            self.state = 261
            self.block_statement()
            self.state = 264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 262
                self.match(MiniGoParser.SEMI)

            elif la_ == 2:
                self.state = 263
                self.newline()


            self.state = 269
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 266
                    self.newline() 
                self.state = 271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_para_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_para(self):
            return self.getTypedRuleContext(MiniGoParser.Method_paraContext,0)


        def method_para_list(self):
            return self.getTypedRuleContext(MiniGoParser.Method_para_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_para_list




    def method_para_list(self):

        localctx = MiniGoParser.Method_para_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_method_para_list)
        try:
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.method_para()
                self.state = 273
                self.method_para_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 275
                self.method_para()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_paraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def composite_types(self):
            return self.getTypedRuleContext(MiniGoParser.Composite_typesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_para




    def method_para(self):

        localctx = MiniGoParser.Method_paraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_method_para)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(MiniGoParser.ID)
            self.state = 279
            self.composite_types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def interface_method_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_method_listContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_decl




    def interface_decl(self):

        localctx = MiniGoParser.Interface_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interface_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(MiniGoParser.TYPE)
            self.state = 282
            self.match(MiniGoParser.ID)
            self.state = 283
            self.match(MiniGoParser.INTERFACE)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 284
                self.newline()
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 290
            self.match(MiniGoParser.LBRACE)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 291
                self.newline()
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 297
                self.interface_method_list()


            self.state = 300
            self.match(MiniGoParser.RBRACE)
            self.state = 303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 301
                self.match(MiniGoParser.SEMI)

            elif la_ == 2:
                self.state = 302
                self.newline()


            self.state = 308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 305
                    self.newline() 
                self.state = 310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_method_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_method(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_methodContext,0)


        def interface_method_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_method_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_method_list




    def interface_method_list(self):

        localctx = MiniGoParser.Interface_method_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interface_method_list)
        try:
            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 311
                self.interface_method()
                self.state = 312
                self.interface_method_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 314
                self.interface_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def interface_para_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_para_listContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_method




    def interface_method(self):

        localctx = MiniGoParser.Interface_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_interface_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(MiniGoParser.ID)
            self.state = 318
            self.match(MiniGoParser.LPAREN)
            self.state = 319
            self.interface_para_list()
            self.state = 320
            self.match(MiniGoParser.RPAREN)
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 321
                self.types()


            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 324
                self.match(MiniGoParser.SEMI)


            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 327
                self.newline()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_para_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_para(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_paraContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def interface_para_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_para_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_para_list




    def interface_para_list(self):

        localctx = MiniGoParser.Interface_para_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_interface_para_list)
        try:
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.interface_para()
                self.state = 334
                self.match(MiniGoParser.COMMA)
                self.state = 335
                self.interface_para_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.interface_para()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_paraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_para




    def interface_para(self):

        localctx = MiniGoParser.Interface_paraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interface_para)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(MiniGoParser.ID)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596832772096) != 0):
                self.state = 342
                self.types()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def list_para(self):
            return self.getTypedRuleContext(MiniGoParser.List_paraContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_func_decl




    def func_decl(self):

        localctx = MiniGoParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(MiniGoParser.FUNC)
            self.state = 346
            self.match(MiniGoParser.ID)
            self.state = 347
            self.match(MiniGoParser.LPAREN)
            self.state = 348
            self.list_para()
            self.state = 349
            self.match(MiniGoParser.RPAREN)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596832772096) != 0):
                self.state = 350
                self.types()


            self.state = 353
            self.block_statement()
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 354
                self.match(MiniGoParser.SEMI)

            elif la_ == 2:
                self.state = 355
                self.newline()


            self.state = 361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 358
                    self.newline() 
                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_paraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def para(self):
            return self.getTypedRuleContext(MiniGoParser.ParaContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_para(self):
            return self.getTypedRuleContext(MiniGoParser.List_paraContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_para




    def list_para(self):

        localctx = MiniGoParser.List_paraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_list_para)
        try:
            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 364
                self.para()
                self.state = 365
                self.match(MiniGoParser.COMMA)
                self.state = 366
                self.list_para()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 368
                self.para()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_para




    def para(self):

        localctx = MiniGoParser.ParaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_para)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(MiniGoParser.ID)
            self.state = 373
            self.types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_block_statement




    def block_statement(self):

        localctx = MiniGoParser.Block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_block_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(MiniGoParser.LBRACE)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 376
                self.newline()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36169534509287328) != 0):
                self.state = 382
                self.list_statement()


            self.state = 385
            self.match(MiniGoParser.RBRACE)
            self.state = 389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 386
                    self.newline() 
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement




    def list_statement(self):

        localctx = MiniGoParser.List_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_list_statement)
        try:
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 392
                self.statement()
                self.state = 393
                self.list_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statementContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement




    def statement(self):

        localctx = MiniGoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 398
                self.declared_statement()
                pass

            elif la_ == 2:
                self.state = 399
                self.assign_statement()
                pass

            elif la_ == 3:
                self.state = 400
                self.if_statement()
                pass

            elif la_ == 4:
                self.state = 401
                self.for_statement()
                pass

            elif la_ == 5:
                self.state = 402
                self.break_statement()
                pass

            elif la_ == 6:
                self.state = 403
                self.continue_statement()
                pass

            elif la_ == 7:
                self.state = 404
                self.call_statement()
                pass

            elif la_ == 8:
                self.state = 405
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decl(self):
            return self.getTypedRuleContext(MiniGoParser.DeclContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement




    def declared_statement(self):

        localctx = MiniGoParser.Declared_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_declared_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.decl()
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 409
                self.newline()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def ass_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Ass_operatorContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_statement




    def assign_statement(self):

        localctx = MiniGoParser.Assign_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assign_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.lhs(0)
            self.state = 416
            self.ass_operator()
            self.state = 417
            self.expr(0)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 418
                self.match(MiniGoParser.SEMI)


            self.state = 424
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 421
                    self.newline() 
                self.state = 426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lhs2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def index_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operatorContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs2




    def lhs2(self):

        localctx = MiniGoParser.Lhs2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_lhs2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(MiniGoParser.ID)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 428
                self.match(MiniGoParser.DOT)
                self.state = 429
                self.match(MiniGoParser.ID)


            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 432
                self.index_operator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def index_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operatorContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs



    def lhs(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.LhsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_lhs, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(MiniGoParser.ID)
            self._ctx.stop = self._input.LT(-1)
            self.state = 445
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 443
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.LhsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lhs)
                        self.state = 438
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 439
                        self.match(MiniGoParser.DOT)
                        self.state = 440
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.LhsContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lhs)
                        self.state = 441
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 442
                        self.index_operator()
                        pass

             
                self.state = 447
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Lhs_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def lhs_list(self):
            return self.getTypedRuleContext(MiniGoParser.Lhs_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs_list




    def lhs_list(self):

        localctx = MiniGoParser.Lhs_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_lhs_list)
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.lhs(0)
                self.state = 449
                self.lhs_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.lhs(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ass_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_ASSIGN(self):
            return self.getToken(MiniGoParser.MINUS_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(MiniGoParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def REM_ASSIGN(self):
            return self.getToken(MiniGoParser.REM_ASSIGN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_ass_operator




    def ass_operator(self):

        localctx = MiniGoParser.Ass_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_ass_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34084860461058) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def list_else_if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_else_if_statementContext,0)


        def else_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Else_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_statement




    def if_statement(self):

        localctx = MiniGoParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(MiniGoParser.IF)
            self.state = 457
            self.match(MiniGoParser.LPAREN)
            self.state = 458
            self.expr(0)
            self.state = 459
            self.match(MiniGoParser.RPAREN)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 460
                self.newline()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 466
            self.block_statement()
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 467
                self.list_else_if_statement()


            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 470
                self.else_statement()


            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 473
                self.newline()
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_else_if_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def else_if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Else_if_statementContext,0)


        def list_else_if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_else_if_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_else_if_statement




    def list_else_if_statement(self):

        localctx = MiniGoParser.List_else_if_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_list_else_if_statement)
        try:
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 479
                self.else_if_statement()
                self.state = 480
                self.list_else_if_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 482
                self.else_if_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_if_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_else_if_statement




    def else_if_statement(self):

        localctx = MiniGoParser.Else_if_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_else_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(MiniGoParser.ELSE)
            self.state = 486
            self.match(MiniGoParser.IF)
            self.state = 487
            self.match(MiniGoParser.LPAREN)
            self.state = 488
            self.expr(0)
            self.state = 489
            self.match(MiniGoParser.RPAREN)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 490
                self.newline()
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 496
            self.block_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_else_statement




    def else_statement(self):

        localctx = MiniGoParser.Else_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_else_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(MiniGoParser.ELSE)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 499
                self.newline()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 505
            self.block_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def init_for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Init_for_statementContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_statement




    def for_statement(self):

        localctx = MiniGoParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.match(MiniGoParser.FOR)
                self.state = 508
                self.expr(0)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 509
                    self.newline()
                    self.state = 514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 515
                self.block_statement()
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 516
                    self.newline()
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 522
                self.match(MiniGoParser.FOR)
                self.state = 523
                self.init_for_statement()
                self.state = 524
                self.expr(0)
                self.state = 525
                self.match(MiniGoParser.SEMI)
                self.state = 526
                self.assign_statement()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 527
                    self.newline()
                    self.state = 532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 533
                self.block_statement()
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 534
                    self.newline()
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 540
                self.match(MiniGoParser.FOR)
                self.state = 541
                self.match(MiniGoParser.ID)
                self.state = 542
                self.match(MiniGoParser.COMMA)
                self.state = 543
                self.value_assign()
                self.state = 544
                self.expr(0)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 545
                    self.newline()
                    self.state = 550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 551
                self.block_statement()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 552
                    self.newline()
                    self.state = 557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_for_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def variable_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Variable_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_init_for_statement




    def init_for_statement(self):

        localctx = MiniGoParser.Init_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_init_for_statement)
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.assign_statement()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.variable_decl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_value_assign




    def value_assign(self):

        localctx = MiniGoParser.Value_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_value_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(MiniGoParser.ID)
            self.state = 565
            self.match(MiniGoParser.T__0)
            self.state = 566
            self.match(MiniGoParser.RANGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_break_statement




    def break_statement(self):

        localctx = MiniGoParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_break_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(MiniGoParser.BREAK)
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 569
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 570
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 573
                self.newline()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_call_statement




    def call_statement(self):

        localctx = MiniGoParser.Call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_call_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 579
                self.lhs(0)


            self.state = 582
            self.match(MiniGoParser.LPAREN)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758907596800) != 0):
                self.state = 583
                self.list_expr()


            self.state = 586
            self.match(MiniGoParser.RPAREN)
            self.state = 589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 587
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 588
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 591
                self.newline()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_statement




    def continue_statement(self):

        localctx = MiniGoParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(MiniGoParser.CONTINUE)
            self.state = 600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 598
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 599
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 602
                self.newline()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_return_statement




    def return_statement(self):

        localctx = MiniGoParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(MiniGoParser.RETURN)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758907596800) != 0):
                self.state = 609
                self.expr(0)


            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 612
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 613
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 616
                self.newline()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_expr




    def list_expr(self):

        localctx = MiniGoParser.List_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_list_expr)
        try:
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.expr(0)
                self.state = 623
                self.match(MiniGoParser.COMMA)
                self.state = 624
                self.list_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.And_exprContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expr



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.and_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                    self.state = 632
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 633
                    self.match(MiniGoParser.OR)
                    self.state = 634
                    self.and_expr(0) 
                self.state = 639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class And_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rela_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Rela_exprContext,0)


        def and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.And_exprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_and_expr



    def and_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.And_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_and_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.rela_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.And_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_and_expr)
                    self.state = 643
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 644
                    self.match(MiniGoParser.AND)
                    self.state = 645
                    self.rela_expr(0) 
                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Rela_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Add_exprContext,0)


        def rela_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Rela_exprContext,0)


        def REL(self):
            return self.getToken(MiniGoParser.REL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_rela_expr



    def rela_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Rela_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_rela_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.add_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Rela_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_rela_expr)
                    self.state = 654
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 655
                    self.match(MiniGoParser.REL)
                    self.state = 656
                    self.add_expr(0) 
                self.state = 661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Add_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mul_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Mul_exprContext,0)


        def add_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Add_exprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_add_expr



    def add_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Add_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_add_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.mul_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Add_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_add_expr)
                    self.state = 665
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 666
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==27):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 667
                    self.mul_expr(0) 
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mul_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_exprContext,0)


        def mul_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Mul_exprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_mul_expr



    def mul_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Mul_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_mul_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.unary_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 681
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Mul_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mul_expr)
                    self.state = 676
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 677
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1879048192) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 678
                    self.unary_expr() 
                self.state = 683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Unary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_exprContext,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def primary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_unary_expr




    def unary_expr(self):

        localctx = MiniGoParser.Unary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_unary_expr)
        self._la = 0 # Token type
        try:
            self.state = 687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25, 27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                _la = self._input.LA(1)
                if not(_la==25 or _la==27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 685
                self.unary_expr()
                pass
            elif token in [22, 23, 24, 47, 51, 55, 56, 57, 58, 59, 60, 61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.primary_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_call(self):
            return self.getTypedRuleContext(MiniGoParser.Func_callContext,0)


        def exprd(self):
            return self.getTypedRuleContext(MiniGoParser.ExprdContext,0)


        def primary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_exprContext,0)


        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primary_expr



    def primary_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Primary_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_primary_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 690
                self.func_call()
                pass

            elif la_ == 2:
                self.state = 691
                self.exprd()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 711
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 709
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Primary_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primary_expr)
                        self.state = 694
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 695
                        self.match(MiniGoParser.LBRACK)
                        self.state = 696
                        self.expr(0)
                        self.state = 697
                        self.match(MiniGoParser.RBRACK)
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Primary_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primary_expr)
                        self.state = 699
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 700
                        self.match(MiniGoParser.DOT)
                        self.state = 701
                        self.match(MiniGoParser.ID)
                        self.state = 707
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                        if la_ == 1:
                            self.state = 702
                            self.match(MiniGoParser.LPAREN)
                            self.state = 704
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758907596800) != 0):
                                self.state = 703
                                self.list_expr()


                            self.state = 706
                            self.match(MiniGoParser.RPAREN)


                        pass

             
                self.state = 713
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literals(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralsContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprd




    def exprd(self):

        localctx = MiniGoParser.ExprdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_exprd)
        try:
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 714
                self.literals()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 715
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 716
                self.match(MiniGoParser.LPAREN)
                self.state = 717
                self.expr(0)
                self.state = 718
                self.match(MiniGoParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def newline(self):
            return self.getTypedRuleContext(MiniGoParser.NewlineContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_func_call




    def func_call(self):

        localctx = MiniGoParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(MiniGoParser.ID)
            self.state = 723
            self.match(MiniGoParser.LPAREN)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758907596800) != 0):
                self.state = 724
                self.list_expr()


            self.state = 727
            self.match(MiniGoParser.RPAREN)
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 728
                self.newline()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_call




    def method_call(self):

        localctx = MiniGoParser.Method_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_method_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(MiniGoParser.DOT)
            self.state = 732
            self.match(MiniGoParser.ID)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 733
                self.match(MiniGoParser.LPAREN)
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758907596800) != 0):
                    self.state = 734
                    self.list_expr()


                self.state = 737
                self.match(MiniGoParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive_types(self):
            return self.getTypedRuleContext(MiniGoParser.Primitive_typesContext,0)


        def composite_types(self):
            return self.getTypedRuleContext(MiniGoParser.Composite_typesContext,0)


        def arr_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_types




    def types(self):

        localctx = MiniGoParser.TypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_types)
        try:
            self.state = 743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 14, 15, 16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.primitive_types()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.composite_types()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 742
                self.arr_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_primitive_types




    def primitive_types(self):

        localctx = MiniGoParser.Primitive_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_primitive_types)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 122880) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Composite_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_type(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_typeContext,0)


        def interface_type(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_composite_types




    def composite_types(self):

        localctx = MiniGoParser.Composite_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_composite_types)
        try:
            self.state = 749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.struct_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.interface_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_type




    def struct_type(self):

        localctx = MiniGoParser.Struct_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_struct_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_type




    def interface_type(self):

        localctx = MiniGoParser.Interface_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_interface_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operatorContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_type




    def arr_type(self):

        localctx = MiniGoParser.Arr_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_arr_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.index_operator()
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 756
                self.types()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def index_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operatorContext,0)


        def DEC_LIT(self):
            return self.getToken(MiniGoParser.DEC_LIT, 0)

        def struct_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_litContext,0)


        def int_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Int_litContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_index_operator




    def index_operator(self):

        localctx = MiniGoParser.Index_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_index_operator)
        try:
            self.state = 770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.match(MiniGoParser.LBRACK)
                self.state = 762
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 760
                    self.match(MiniGoParser.DEC_LIT)
                    pass
                elif token in [55]:
                    self.state = 761
                    self.struct_lit()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 764
                self.match(MiniGoParser.RBRACK)
                self.state = 765
                self.index_operator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.match(MiniGoParser.LBRACK)
                self.state = 767
                self.int_lit()
                self.state = 768
                self.match(MiniGoParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Int_litContext,0)


        def float_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Float_litContext,0)


        def str_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Str_litContext,0)


        def bool_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Bool_litContext,0)


        def arr_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_litContext,0)


        def struct_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_litContext,0)


        def nil_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Nil_litContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literals




    def literals(self):

        localctx = MiniGoParser.LiteralsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_literals)
        try:
            self.state = 779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56, 57, 58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.int_lit()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self.float_lit()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 774
                self.str_lit()
                pass
            elif token in [23, 24]:
                self.enterOuterAlt(localctx, 4)
                self.state = 775
                self.bool_lit()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 5)
                self.state = 776
                self.arr_lit()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 777
                self.struct_lit()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 7)
                self.state = 778
                self.nil_lit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def list_field(self):
            return self.getTypedRuleContext(MiniGoParser.List_fieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_lit




    def struct_lit(self):

        localctx = MiniGoParser.Struct_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_struct_lit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(MiniGoParser.ID)
            self.state = 782
            self.match(MiniGoParser.LBRACE)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 783
                self.list_field()


            self.state = 786
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self):
            return self.getTypedRuleContext(MiniGoParser.FieldContext,0)


        def newline(self):
            return self.getTypedRuleContext(MiniGoParser.NewlineContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_field(self):
            return self.getTypedRuleContext(MiniGoParser.List_fieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_field




    def list_field(self):

        localctx = MiniGoParser.List_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_list_field)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 788
                self.field()
                self.state = 790
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 789
                    self.newline()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.field()
                self.state = 793
                self.match(MiniGoParser.COMMA)
                self.state = 794
                self.list_field()
                self.state = 796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 795
                    self.newline()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field




    def field(self):

        localctx = MiniGoParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(MiniGoParser.ID)
            self.state = 801
            self.match(MiniGoParser.COLON)
            self.state = 802
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arr_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_typeContext,0)


        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def arr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_lit




    def arr_lit(self):

        localctx = MiniGoParser.Arr_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_arr_lit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.arr_type()
            self.state = 805
            self.match(MiniGoParser.LBRACE)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578612708861018112) != 0):
                self.state = 806
                self.arr_list()


            self.state = 809
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def arr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_listContext,0)


        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_list




    def arr_list(self):

        localctx = MiniGoParser.Arr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arr_list)
        self._la = 0 # Token type
        try:
            self.state = 821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.match(MiniGoParser.LBRACE)
                self.state = 812
                self.arr_list()
                pass
            elif token in [22, 23, 24, 25, 27, 47, 51, 55, 56, 57, 58, 59, 60, 61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.list_expr()
                self.state = 815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 814
                    self.match(MiniGoParser.RBRACE)


                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 817
                    self.match(MiniGoParser.COMMA)
                    self.state = 818
                    self.arr_list()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEC_LIT(self):
            return self.getToken(MiniGoParser.DEC_LIT, 0)

        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_int_lit




    def int_lit(self):

        localctx = MiniGoParser.Int_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_int_lit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1080863910568919040) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_float_lit




    def float_lit(self):

        localctx = MiniGoParser.Float_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_float_lit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(MiniGoParser.FLOAT_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_bool_lit




    def bool_lit(self):

        localctx = MiniGoParser.Bool_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_bool_lit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            _la = self._input.LA(1)
            if not(_la==23 or _la==24):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Str_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(MiniGoParser.STR_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_str_lit




    def str_lit(self):

        localctx = MiniGoParser.Str_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_str_lit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(MiniGoParser.STR_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nil_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_nil_lit




    def nil_lit(self):

        localctx = MiniGoParser.Nil_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nil_lit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(MiniGoParser.NIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MiniGoParser.RULE_newline




    def newline(self):

        localctx = MiniGoParser.NewlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_newline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 833
                self.match(MiniGoParser.T__1)


            self.state = 836
            self.match(MiniGoParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[25] = self.lhs_sempred
        self._predicates[40] = self.expr_sempred
        self._predicates[41] = self.and_expr_sempred
        self._predicates[42] = self.rela_expr_sempred
        self._predicates[43] = self.add_expr_sempred
        self._predicates[44] = self.mul_expr_sempred
        self._predicates[46] = self.primary_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def lhs_sempred(self, localctx:LhsContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def and_expr_sempred(self, localctx:And_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def rela_expr_sempred(self, localctx:Rela_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def add_expr_sempred(self, localctx:Add_exprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def mul_expr_sempred(self, localctx:Mul_exprContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def primary_expr_sempred(self, localctx:Primary_exprContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         




