# Generated from d:/HCMUT/PPL/2/BTL1/Ass1/MiniGO_BTL1/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,68,542,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,156,8,2,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,
        1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,
        1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,5,52,346,8,52,
        10,52,12,52,349,9,52,1,53,1,53,1,54,1,54,3,54,355,8,54,1,54,4,54,
        358,8,54,11,54,12,54,359,1,55,4,55,363,8,55,11,55,12,55,364,1,55,
        1,55,5,55,369,8,55,10,55,12,55,372,9,55,1,55,3,55,375,8,55,1,55,
        1,55,4,55,379,8,55,11,55,12,55,380,1,55,3,55,384,8,55,1,55,4,55,
        387,8,55,11,55,12,55,388,1,55,1,55,3,55,393,8,55,1,56,1,56,1,56,
        5,56,398,8,56,10,56,12,56,401,9,56,3,56,403,8,56,1,57,1,57,1,57,
        1,57,3,57,409,8,57,1,57,4,57,412,8,57,11,57,12,57,413,1,57,1,57,
        1,58,1,58,1,58,1,58,3,58,422,8,58,1,58,4,58,425,8,58,11,58,12,58,
        426,1,58,1,58,1,59,1,59,1,59,1,59,3,59,435,8,59,1,59,4,59,438,8,
        59,11,59,12,59,439,1,59,1,59,1,60,1,60,1,60,1,60,3,60,448,8,60,1,
        61,1,61,1,61,5,61,453,8,61,10,61,12,61,456,9,61,1,61,1,61,1,61,1,
        62,1,62,3,62,463,8,62,1,63,1,63,1,64,4,64,468,8,64,11,64,12,64,469,
        1,64,1,64,1,65,1,65,1,65,1,65,5,65,478,8,65,10,65,12,65,481,9,65,
        1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,490,8,66,10,66,12,66,493,
        9,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,5,68,
        506,8,68,10,68,12,68,509,9,68,1,68,1,68,1,68,3,68,514,8,68,1,68,
        1,68,1,69,1,69,1,69,5,69,521,8,69,10,69,12,69,524,9,69,1,69,1,69,
        1,69,1,69,3,69,530,8,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,
        1,71,3,71,541,8,71,1,491,0,72,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
        52,105,53,107,0,109,0,111,54,113,55,115,56,117,57,119,58,121,59,
        123,60,125,61,127,62,129,63,131,64,133,65,135,66,137,67,139,68,141,
        0,143,0,1,0,18,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,49,57,1,0,48,49,
        1,0,48,55,3,0,48,57,65,70,97,102,5,0,10,10,12,13,34,34,39,39,92,
        92,3,0,9,10,12,13,32,32,2,0,10,10,13,13,1,1,10,10,6,0,10,10,13,13,
        34,34,39,39,92,92,98,98,3,0,13,13,39,39,92,92,1,0,39,39,1,0,34,34,
        6,0,39,39,92,92,98,98,110,110,114,114,116,116,579,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
        1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
        0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
        135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,1,145,1,0,0,0,3,147,1,0,
        0,0,5,155,1,0,0,0,7,157,1,0,0,0,9,160,1,0,0,0,11,165,1,0,0,0,13,
        169,1,0,0,0,15,176,1,0,0,0,17,181,1,0,0,0,19,186,1,0,0,0,21,193,
        1,0,0,0,23,203,1,0,0,0,25,210,1,0,0,0,27,214,1,0,0,0,29,220,1,0,
        0,0,31,228,1,0,0,0,33,234,1,0,0,0,35,238,1,0,0,0,37,247,1,0,0,0,
        39,253,1,0,0,0,41,259,1,0,0,0,43,263,1,0,0,0,45,268,1,0,0,0,47,274,
        1,0,0,0,49,276,1,0,0,0,51,278,1,0,0,0,53,280,1,0,0,0,55,282,1,0,
        0,0,57,284,1,0,0,0,59,286,1,0,0,0,61,289,1,0,0,0,63,292,1,0,0,0,
        65,294,1,0,0,0,67,296,1,0,0,0,69,299,1,0,0,0,71,302,1,0,0,0,73,305,
        1,0,0,0,75,308,1,0,0,0,77,310,1,0,0,0,79,313,1,0,0,0,81,316,1,0,
        0,0,83,319,1,0,0,0,85,322,1,0,0,0,87,325,1,0,0,0,89,327,1,0,0,0,
        91,329,1,0,0,0,93,331,1,0,0,0,95,333,1,0,0,0,97,335,1,0,0,0,99,337,
        1,0,0,0,101,339,1,0,0,0,103,341,1,0,0,0,105,343,1,0,0,0,107,350,
        1,0,0,0,109,352,1,0,0,0,111,392,1,0,0,0,113,402,1,0,0,0,115,408,
        1,0,0,0,117,421,1,0,0,0,119,434,1,0,0,0,121,447,1,0,0,0,123,449,
        1,0,0,0,125,462,1,0,0,0,127,464,1,0,0,0,129,467,1,0,0,0,131,473,
        1,0,0,0,133,484,1,0,0,0,135,499,1,0,0,0,137,502,1,0,0,0,139,517,
        1,0,0,0,141,533,1,0,0,0,143,540,1,0,0,0,145,146,5,13,0,0,146,2,1,
        0,0,0,147,148,5,10,0,0,148,4,1,0,0,0,149,156,3,63,31,0,150,156,3,
        65,32,0,151,156,3,67,33,0,152,156,3,69,34,0,153,156,3,59,29,0,154,
        156,3,61,30,0,155,149,1,0,0,0,155,150,1,0,0,0,155,151,1,0,0,0,155,
        152,1,0,0,0,155,153,1,0,0,0,155,154,1,0,0,0,156,6,1,0,0,0,157,158,
        5,105,0,0,158,159,5,102,0,0,159,8,1,0,0,0,160,161,5,101,0,0,161,
        162,5,108,0,0,162,163,5,115,0,0,163,164,5,101,0,0,164,10,1,0,0,0,
        165,166,5,102,0,0,166,167,5,111,0,0,167,168,5,114,0,0,168,12,1,0,
        0,0,169,170,5,114,0,0,170,171,5,101,0,0,171,172,5,116,0,0,172,173,
        5,117,0,0,173,174,5,114,0,0,174,175,5,110,0,0,175,14,1,0,0,0,176,
        177,5,102,0,0,177,178,5,117,0,0,178,179,5,110,0,0,179,180,5,99,0,
        0,180,16,1,0,0,0,181,182,5,116,0,0,182,183,5,121,0,0,183,184,5,112,
        0,0,184,185,5,101,0,0,185,18,1,0,0,0,186,187,5,115,0,0,187,188,5,
        116,0,0,188,189,5,114,0,0,189,190,5,117,0,0,190,191,5,99,0,0,191,
        192,5,116,0,0,192,20,1,0,0,0,193,194,5,105,0,0,194,195,5,110,0,0,
        195,196,5,116,0,0,196,197,5,101,0,0,197,198,5,114,0,0,198,199,5,
        102,0,0,199,200,5,97,0,0,200,201,5,99,0,0,201,202,5,101,0,0,202,
        22,1,0,0,0,203,204,5,115,0,0,204,205,5,116,0,0,205,206,5,114,0,0,
        206,207,5,105,0,0,207,208,5,110,0,0,208,209,5,103,0,0,209,24,1,0,
        0,0,210,211,5,105,0,0,211,212,5,110,0,0,212,213,5,116,0,0,213,26,
        1,0,0,0,214,215,5,102,0,0,215,216,5,108,0,0,216,217,5,111,0,0,217,
        218,5,97,0,0,218,219,5,116,0,0,219,28,1,0,0,0,220,221,5,98,0,0,221,
        222,5,111,0,0,222,223,5,111,0,0,223,224,5,108,0,0,224,225,5,101,
        0,0,225,226,5,97,0,0,226,227,5,110,0,0,227,30,1,0,0,0,228,229,5,
        99,0,0,229,230,5,111,0,0,230,231,5,110,0,0,231,232,5,115,0,0,232,
        233,5,116,0,0,233,32,1,0,0,0,234,235,5,118,0,0,235,236,5,97,0,0,
        236,237,5,114,0,0,237,34,1,0,0,0,238,239,5,99,0,0,239,240,5,111,
        0,0,240,241,5,110,0,0,241,242,5,116,0,0,242,243,5,105,0,0,243,244,
        5,110,0,0,244,245,5,117,0,0,245,246,5,101,0,0,246,36,1,0,0,0,247,
        248,5,98,0,0,248,249,5,114,0,0,249,250,5,101,0,0,250,251,5,97,0,
        0,251,252,5,107,0,0,252,38,1,0,0,0,253,254,5,114,0,0,254,255,5,97,
        0,0,255,256,5,110,0,0,256,257,5,103,0,0,257,258,5,101,0,0,258,40,
        1,0,0,0,259,260,5,110,0,0,260,261,5,105,0,0,261,262,5,108,0,0,262,
        42,1,0,0,0,263,264,5,116,0,0,264,265,5,114,0,0,265,266,5,117,0,0,
        266,267,5,101,0,0,267,44,1,0,0,0,268,269,5,102,0,0,269,270,5,97,
        0,0,270,271,5,108,0,0,271,272,5,115,0,0,272,273,5,101,0,0,273,46,
        1,0,0,0,274,275,5,33,0,0,275,48,1,0,0,0,276,277,5,43,0,0,277,50,
        1,0,0,0,278,279,5,45,0,0,279,52,1,0,0,0,280,281,5,42,0,0,281,54,
        1,0,0,0,282,283,5,47,0,0,283,56,1,0,0,0,284,285,5,37,0,0,285,58,
        1,0,0,0,286,287,5,61,0,0,287,288,5,61,0,0,288,60,1,0,0,0,289,290,
        5,33,0,0,290,291,5,61,0,0,291,62,1,0,0,0,292,293,5,60,0,0,293,64,
        1,0,0,0,294,295,5,62,0,0,295,66,1,0,0,0,296,297,5,60,0,0,297,298,
        5,61,0,0,298,68,1,0,0,0,299,300,5,62,0,0,300,301,5,61,0,0,301,70,
        1,0,0,0,302,303,5,124,0,0,303,304,5,124,0,0,304,72,1,0,0,0,305,306,
        5,38,0,0,306,307,5,38,0,0,307,74,1,0,0,0,308,309,5,61,0,0,309,76,
        1,0,0,0,310,311,5,43,0,0,311,312,5,61,0,0,312,78,1,0,0,0,313,314,
        5,45,0,0,314,315,5,61,0,0,315,80,1,0,0,0,316,317,5,42,0,0,317,318,
        5,61,0,0,318,82,1,0,0,0,319,320,5,47,0,0,320,321,5,61,0,0,321,84,
        1,0,0,0,322,323,5,37,0,0,323,324,5,61,0,0,324,86,1,0,0,0,325,326,
        5,46,0,0,326,88,1,0,0,0,327,328,5,40,0,0,328,90,1,0,0,0,329,330,
        5,41,0,0,330,92,1,0,0,0,331,332,5,123,0,0,332,94,1,0,0,0,333,334,
        5,125,0,0,334,96,1,0,0,0,335,336,5,91,0,0,336,98,1,0,0,0,337,338,
        5,93,0,0,338,100,1,0,0,0,339,340,5,59,0,0,340,102,1,0,0,0,341,342,
        5,44,0,0,342,104,1,0,0,0,343,347,7,0,0,0,344,346,7,1,0,0,345,344,
        1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,106,
        1,0,0,0,349,347,1,0,0,0,350,351,7,2,0,0,351,108,1,0,0,0,352,354,
        7,3,0,0,353,355,7,4,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,357,
        1,0,0,0,356,358,3,107,53,0,357,356,1,0,0,0,358,359,1,0,0,0,359,357,
        1,0,0,0,359,360,1,0,0,0,360,110,1,0,0,0,361,363,3,107,53,0,362,361,
        1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,366,
        1,0,0,0,366,370,5,46,0,0,367,369,3,107,53,0,368,367,1,0,0,0,369,
        372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,374,1,0,0,0,372,
        370,1,0,0,0,373,375,3,109,54,0,374,373,1,0,0,0,374,375,1,0,0,0,375,
        393,1,0,0,0,376,378,5,46,0,0,377,379,3,107,53,0,378,377,1,0,0,0,
        379,380,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,
        382,384,3,109,54,0,383,382,1,0,0,0,383,384,1,0,0,0,384,393,1,0,0,
        0,385,387,3,107,53,0,386,385,1,0,0,0,387,388,1,0,0,0,388,386,1,0,
        0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,3,109,54,0,391,393,1,
        0,0,0,392,362,1,0,0,0,392,376,1,0,0,0,392,386,1,0,0,0,393,112,1,
        0,0,0,394,403,5,48,0,0,395,399,7,5,0,0,396,398,3,107,53,0,397,396,
        1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,403,
        1,0,0,0,401,399,1,0,0,0,402,394,1,0,0,0,402,395,1,0,0,0,403,114,
        1,0,0,0,404,405,5,48,0,0,405,409,5,98,0,0,406,407,5,48,0,0,407,409,
        5,66,0,0,408,404,1,0,0,0,408,406,1,0,0,0,409,411,1,0,0,0,410,412,
        7,6,0,0,411,410,1,0,0,0,412,413,1,0,0,0,413,411,1,0,0,0,413,414,
        1,0,0,0,414,415,1,0,0,0,415,416,6,57,0,0,416,116,1,0,0,0,417,418,
        5,48,0,0,418,422,5,111,0,0,419,420,5,48,0,0,420,422,5,79,0,0,421,
        417,1,0,0,0,421,419,1,0,0,0,422,424,1,0,0,0,423,425,7,7,0,0,424,
        423,1,0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,
        428,1,0,0,0,428,429,6,58,1,0,429,118,1,0,0,0,430,431,5,48,0,0,431,
        435,5,120,0,0,432,433,5,48,0,0,433,435,5,88,0,0,434,430,1,0,0,0,
        434,432,1,0,0,0,435,437,1,0,0,0,436,438,7,8,0,0,437,436,1,0,0,0,
        438,439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,
        441,442,6,59,2,0,442,120,1,0,0,0,443,448,3,113,56,0,444,448,3,115,
        57,0,445,448,3,117,58,0,446,448,3,119,59,0,447,443,1,0,0,0,447,444,
        1,0,0,0,447,445,1,0,0,0,447,446,1,0,0,0,448,122,1,0,0,0,449,454,
        5,34,0,0,450,453,3,143,71,0,451,453,8,9,0,0,452,450,1,0,0,0,452,
        451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,
        457,1,0,0,0,456,454,1,0,0,0,457,458,5,34,0,0,458,459,6,61,3,0,459,
        124,1,0,0,0,460,463,3,43,21,0,461,463,3,45,22,0,462,460,1,0,0,0,
        462,461,1,0,0,0,463,126,1,0,0,0,464,465,3,41,20,0,465,128,1,0,0,
        0,466,468,7,10,0,0,467,466,1,0,0,0,468,469,1,0,0,0,469,467,1,0,0,
        0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,6,64,4,0,472,130,1,0,0,
        0,473,474,5,47,0,0,474,475,5,47,0,0,475,479,1,0,0,0,476,478,8,11,
        0,0,477,476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,
        0,0,480,482,1,0,0,0,481,479,1,0,0,0,482,483,6,65,4,0,483,132,1,0,
        0,0,484,485,5,47,0,0,485,486,5,42,0,0,486,491,1,0,0,0,487,490,3,
        133,66,0,488,490,9,0,0,0,489,487,1,0,0,0,489,488,1,0,0,0,490,493,
        1,0,0,0,491,492,1,0,0,0,491,489,1,0,0,0,492,494,1,0,0,0,493,491,
        1,0,0,0,494,495,5,42,0,0,495,496,5,47,0,0,496,497,1,0,0,0,497,498,
        6,66,4,0,498,134,1,0,0,0,499,500,9,0,0,0,500,501,6,67,5,0,501,136,
        1,0,0,0,502,507,5,34,0,0,503,506,8,9,0,0,504,506,3,143,71,0,505,
        503,1,0,0,0,505,504,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,
        508,1,0,0,0,508,513,1,0,0,0,509,507,1,0,0,0,510,514,7,12,0,0,511,
        512,5,13,0,0,512,514,5,10,0,0,513,510,1,0,0,0,513,511,1,0,0,0,514,
        515,1,0,0,0,515,516,6,68,6,0,516,138,1,0,0,0,517,522,5,34,0,0,518,
        521,8,13,0,0,519,521,3,143,71,0,520,518,1,0,0,0,520,519,1,0,0,0,
        521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,529,1,0,0,0,
        524,522,1,0,0,0,525,530,7,14,0,0,526,530,3,141,70,0,527,528,7,15,
        0,0,528,530,8,16,0,0,529,525,1,0,0,0,529,526,1,0,0,0,529,527,1,0,
        0,0,530,531,1,0,0,0,531,532,6,69,7,0,532,140,1,0,0,0,533,534,5,92,
        0,0,534,535,8,17,0,0,535,142,1,0,0,0,536,537,5,92,0,0,537,541,7,
        17,0,0,538,539,7,15,0,0,539,541,7,16,0,0,540,536,1,0,0,0,540,538,
        1,0,0,0,541,144,1,0,0,0,35,0,155,347,354,359,364,370,374,380,383,
        388,392,399,402,408,413,421,426,434,439,447,452,454,462,469,479,
        489,491,505,507,513,520,522,529,540,8,1,57,0,1,58,1,1,59,2,1,61,
        3,6,0,0,1,67,4,1,68,5,1,69,6
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    REL = 3
    IF = 4
    ELSE = 5
    FOR = 6
    RETURN = 7
    FUNC = 8
    TYPE = 9
    STRUCT = 10
    INTERFACE = 11
    STRING = 12
    INT = 13
    FLOAT = 14
    BOOLEAN = 15
    CONST = 16
    VAR = 17
    CONTINUE = 18
    BREAK = 19
    RANGE = 20
    NIL = 21
    TRUE = 22
    FALSE = 23
    NOT = 24
    ADD = 25
    MINUS = 26
    MUL = 27
    DIV = 28
    MOD = 29
    EQUAL = 30
    DIFF = 31
    LT = 32
    GT = 33
    LE = 34
    GE = 35
    OR = 36
    AND = 37
    ASSIGN = 38
    ADD_ASSIGN = 39
    MINUS_ASSIGN = 40
    MULT_ASSIGN = 41
    DIV_ASSIGN = 42
    REM_ASSIGN = 43
    DOT = 44
    LPAREN = 45
    RPAREN = 46
    LBRACE = 47
    RBRACE = 48
    LBRACK = 49
    RBRACK = 50
    SEMI = 51
    COMMA = 52
    ID = 53
    FLOAT_LIT = 54
    DEC_LIT = 55
    BIN_LIT = 56
    OCT_LIT = 57
    HEX_LIT = 58
    INT_LIT = 59
    STR_LIT = 60
    BOOL_LIT = 61
    NIL_LIT = 62
    WS = 63
    LINE_COMMENT = 64
    BLOCK_COMMENT = 65
    ERROR_CHAR = 66
    UNCLOSE_STRING = 67
    ILLEGAL_ESCAPE = 68

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\\r'", "'\\n'", "'if'", "'else'", "'for'", "'return'", "'func'", 
            "'type'", "'struct'", "'interface'", "'string'", "'int'", "'float'", 
            "'boolean'", "'const'", "'var'", "'continue'", "'break'", "'range'", 
            "'nil'", "'true'", "'false'", "'!'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'||'", 
            "'&&'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "REL", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
            "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", 
            "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "NOT", 
            "ADD", "MINUS", "MUL", "DIV", "MOD", "EQUAL", "DIFF", "LT", 
            "GT", "LE", "GE", "OR", "AND", "ASSIGN", "ADD_ASSIGN", "MINUS_ASSIGN", 
            "MULT_ASSIGN", "DIV_ASSIGN", "REM_ASSIGN", "DOT", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
            "ID", "FLOAT_LIT", "DEC_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", 
            "INT_LIT", "STR_LIT", "BOOL_LIT", "NIL_LIT", "WS", "LINE_COMMENT", 
            "BLOCK_COMMENT", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "REL", "IF", "ELSE", "FOR", "RETURN", 
                  "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", 
                  "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", 
                  "RANGE", "NIL", "TRUE", "FALSE", "NOT", "ADD", "MINUS", 
                  "MUL", "DIV", "MOD", "EQUAL", "DIFF", "LT", "GT", "LE", 
                  "GE", "OR", "AND", "ASSIGN", "ADD_ASSIGN", "MINUS_ASSIGN", 
                  "MULT_ASSIGN", "DIV_ASSIGN", "REM_ASSIGN", "DOT", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", 
                  "COMMA", "ID", "DIGIT", "EXP", "FLOAT_LIT", "DEC_LIT", 
                  "BIN_LIT", "OCT_LIT", "HEX_LIT", "INT_LIT", "STR_LIT", 
                  "BOOL_LIT", "NIL_LIT", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
                  "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "IllegalEscape", 
                  "ESCAPE_SEQ" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[57] = self.BIN_LIT_action 
            actions[58] = self.OCT_LIT_action 
            actions[59] = self.HEX_LIT_action 
            actions[61] = self.STR_LIT_action 
            actions[67] = self.ERROR_CHAR_action 
            actions[68] = self.UNCLOSE_STRING_action 
            actions[69] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def BIN_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                        self.text = str(int(self.text, 2))
                    
     

    def OCT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
               
                        self.text = str(int(self.text, 8))
                    
     

    def HEX_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                        self.text = str(int(self.text, 16))
                    
     

    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[1:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[1:-1])
                else:
                    raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:

            	raise IllegalEscape(self.text[1:])

     


