# Generated from d:/HCMUT/PPL/2/BTL1/Ass1/MiniGO_BTL1/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,67,534,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,1,0,1,
        0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,154,8,2,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
        15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,
        38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,
        42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,
        48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,5,53,346,8,
        53,10,53,12,53,349,9,53,1,54,1,54,1,55,1,55,3,55,355,8,55,1,55,4,
        55,358,8,55,11,55,12,55,359,1,56,4,56,363,8,56,11,56,12,56,364,1,
        56,1,56,5,56,369,8,56,10,56,12,56,372,9,56,1,56,3,56,375,8,56,1,
        56,1,56,4,56,379,8,56,11,56,12,56,380,1,56,3,56,384,8,56,1,56,4,
        56,387,8,56,11,56,12,56,388,1,56,1,56,3,56,393,8,56,1,57,1,57,1,
        57,5,57,398,8,57,10,57,12,57,401,9,57,3,57,403,8,57,1,58,1,58,1,
        58,1,58,3,58,409,8,58,1,58,4,58,412,8,58,11,58,12,58,413,1,58,1,
        58,1,59,1,59,1,59,1,59,3,59,422,8,59,1,59,4,59,425,8,59,11,59,12,
        59,426,1,59,1,59,1,60,1,60,1,60,1,60,3,60,435,8,60,1,60,4,60,438,
        8,60,11,60,12,60,439,1,60,1,60,1,61,1,61,1,61,5,61,447,8,61,10,61,
        12,61,450,9,61,1,61,1,61,1,61,1,62,1,62,3,62,457,8,62,1,63,4,63,
        460,8,63,11,63,12,63,461,1,63,1,63,1,64,1,64,1,64,1,64,5,64,470,
        8,64,10,64,12,64,473,9,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,5,65,
        482,8,65,10,65,12,65,485,9,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,
        1,66,1,67,1,67,1,67,5,67,498,8,67,10,67,12,67,501,9,67,1,67,1,67,
        1,67,3,67,506,8,67,1,67,1,67,1,68,1,68,1,68,5,68,513,8,68,10,68,
        12,68,516,9,68,1,68,1,68,1,68,1,68,3,68,522,8,68,1,68,1,68,1,69,
        1,69,1,69,1,70,1,70,1,70,1,70,3,70,533,8,70,1,483,0,71,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        97,49,99,50,101,51,103,52,105,53,107,54,109,0,111,0,113,55,115,56,
        117,57,119,58,121,59,123,60,125,61,127,62,129,63,131,64,133,65,135,
        66,137,67,139,0,141,0,1,0,18,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,
        49,57,1,0,48,49,1,0,48,55,3,0,48,57,65,70,97,102,5,0,10,10,12,13,
        34,34,39,39,92,92,3,0,9,9,12,13,32,32,1,0,13,13,1,1,10,10,6,0,10,
        10,13,13,34,34,39,39,92,92,98,98,3,0,13,13,39,39,92,92,1,0,39,39,
        1,0,34,34,6,0,39,39,92,92,98,98,110,110,114,114,116,116,568,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,113,1,0,0,0,0,
        115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,
        0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,
        1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,143,1,0,0,0,3,145,1,0,0,0,
        5,153,1,0,0,0,7,155,1,0,0,0,9,158,1,0,0,0,11,163,1,0,0,0,13,167,
        1,0,0,0,15,174,1,0,0,0,17,179,1,0,0,0,19,184,1,0,0,0,21,191,1,0,
        0,0,23,201,1,0,0,0,25,208,1,0,0,0,27,212,1,0,0,0,29,218,1,0,0,0,
        31,226,1,0,0,0,33,232,1,0,0,0,35,236,1,0,0,0,37,245,1,0,0,0,39,251,
        1,0,0,0,41,257,1,0,0,0,43,261,1,0,0,0,45,266,1,0,0,0,47,272,1,0,
        0,0,49,274,1,0,0,0,51,276,1,0,0,0,53,278,1,0,0,0,55,280,1,0,0,0,
        57,282,1,0,0,0,59,284,1,0,0,0,61,287,1,0,0,0,63,290,1,0,0,0,65,292,
        1,0,0,0,67,294,1,0,0,0,69,297,1,0,0,0,71,300,1,0,0,0,73,303,1,0,
        0,0,75,306,1,0,0,0,77,308,1,0,0,0,79,311,1,0,0,0,81,314,1,0,0,0,
        83,317,1,0,0,0,85,320,1,0,0,0,87,323,1,0,0,0,89,325,1,0,0,0,91,327,
        1,0,0,0,93,329,1,0,0,0,95,331,1,0,0,0,97,333,1,0,0,0,99,335,1,0,
        0,0,101,337,1,0,0,0,103,339,1,0,0,0,105,341,1,0,0,0,107,343,1,0,
        0,0,109,350,1,0,0,0,111,352,1,0,0,0,113,392,1,0,0,0,115,402,1,0,
        0,0,117,408,1,0,0,0,119,421,1,0,0,0,121,434,1,0,0,0,123,443,1,0,
        0,0,125,456,1,0,0,0,127,459,1,0,0,0,129,465,1,0,0,0,131,476,1,0,
        0,0,133,491,1,0,0,0,135,494,1,0,0,0,137,509,1,0,0,0,139,525,1,0,
        0,0,141,532,1,0,0,0,143,144,5,13,0,0,144,2,1,0,0,0,145,146,5,10,
        0,0,146,4,1,0,0,0,147,154,3,63,31,0,148,154,3,65,32,0,149,154,3,
        67,33,0,150,154,3,69,34,0,151,154,3,59,29,0,152,154,3,61,30,0,153,
        147,1,0,0,0,153,148,1,0,0,0,153,149,1,0,0,0,153,150,1,0,0,0,153,
        151,1,0,0,0,153,152,1,0,0,0,154,6,1,0,0,0,155,156,5,105,0,0,156,
        157,5,102,0,0,157,8,1,0,0,0,158,159,5,101,0,0,159,160,5,108,0,0,
        160,161,5,115,0,0,161,162,5,101,0,0,162,10,1,0,0,0,163,164,5,102,
        0,0,164,165,5,111,0,0,165,166,5,114,0,0,166,12,1,0,0,0,167,168,5,
        114,0,0,168,169,5,101,0,0,169,170,5,116,0,0,170,171,5,117,0,0,171,
        172,5,114,0,0,172,173,5,110,0,0,173,14,1,0,0,0,174,175,5,102,0,0,
        175,176,5,117,0,0,176,177,5,110,0,0,177,178,5,99,0,0,178,16,1,0,
        0,0,179,180,5,116,0,0,180,181,5,121,0,0,181,182,5,112,0,0,182,183,
        5,101,0,0,183,18,1,0,0,0,184,185,5,115,0,0,185,186,5,116,0,0,186,
        187,5,114,0,0,187,188,5,117,0,0,188,189,5,99,0,0,189,190,5,116,0,
        0,190,20,1,0,0,0,191,192,5,105,0,0,192,193,5,110,0,0,193,194,5,116,
        0,0,194,195,5,101,0,0,195,196,5,114,0,0,196,197,5,102,0,0,197,198,
        5,97,0,0,198,199,5,99,0,0,199,200,5,101,0,0,200,22,1,0,0,0,201,202,
        5,115,0,0,202,203,5,116,0,0,203,204,5,114,0,0,204,205,5,105,0,0,
        205,206,5,110,0,0,206,207,5,103,0,0,207,24,1,0,0,0,208,209,5,105,
        0,0,209,210,5,110,0,0,210,211,5,116,0,0,211,26,1,0,0,0,212,213,5,
        102,0,0,213,214,5,108,0,0,214,215,5,111,0,0,215,216,5,97,0,0,216,
        217,5,116,0,0,217,28,1,0,0,0,218,219,5,98,0,0,219,220,5,111,0,0,
        220,221,5,111,0,0,221,222,5,108,0,0,222,223,5,101,0,0,223,224,5,
        97,0,0,224,225,5,110,0,0,225,30,1,0,0,0,226,227,5,99,0,0,227,228,
        5,111,0,0,228,229,5,110,0,0,229,230,5,115,0,0,230,231,5,116,0,0,
        231,32,1,0,0,0,232,233,5,118,0,0,233,234,5,97,0,0,234,235,5,114,
        0,0,235,34,1,0,0,0,236,237,5,99,0,0,237,238,5,111,0,0,238,239,5,
        110,0,0,239,240,5,116,0,0,240,241,5,105,0,0,241,242,5,110,0,0,242,
        243,5,117,0,0,243,244,5,101,0,0,244,36,1,0,0,0,245,246,5,98,0,0,
        246,247,5,114,0,0,247,248,5,101,0,0,248,249,5,97,0,0,249,250,5,107,
        0,0,250,38,1,0,0,0,251,252,5,114,0,0,252,253,5,97,0,0,253,254,5,
        110,0,0,254,255,5,103,0,0,255,256,5,101,0,0,256,40,1,0,0,0,257,258,
        5,110,0,0,258,259,5,105,0,0,259,260,5,108,0,0,260,42,1,0,0,0,261,
        262,5,116,0,0,262,263,5,114,0,0,263,264,5,117,0,0,264,265,5,101,
        0,0,265,44,1,0,0,0,266,267,5,102,0,0,267,268,5,97,0,0,268,269,5,
        108,0,0,269,270,5,115,0,0,270,271,5,101,0,0,271,46,1,0,0,0,272,273,
        5,33,0,0,273,48,1,0,0,0,274,275,5,43,0,0,275,50,1,0,0,0,276,277,
        5,45,0,0,277,52,1,0,0,0,278,279,5,42,0,0,279,54,1,0,0,0,280,281,
        5,47,0,0,281,56,1,0,0,0,282,283,5,37,0,0,283,58,1,0,0,0,284,285,
        5,61,0,0,285,286,5,61,0,0,286,60,1,0,0,0,287,288,5,33,0,0,288,289,
        5,61,0,0,289,62,1,0,0,0,290,291,5,60,0,0,291,64,1,0,0,0,292,293,
        5,62,0,0,293,66,1,0,0,0,294,295,5,60,0,0,295,296,5,61,0,0,296,68,
        1,0,0,0,297,298,5,62,0,0,298,299,5,61,0,0,299,70,1,0,0,0,300,301,
        5,124,0,0,301,302,5,124,0,0,302,72,1,0,0,0,303,304,5,38,0,0,304,
        305,5,38,0,0,305,74,1,0,0,0,306,307,5,61,0,0,307,76,1,0,0,0,308,
        309,5,43,0,0,309,310,5,61,0,0,310,78,1,0,0,0,311,312,5,45,0,0,312,
        313,5,61,0,0,313,80,1,0,0,0,314,315,5,42,0,0,315,316,5,61,0,0,316,
        82,1,0,0,0,317,318,5,47,0,0,318,319,5,61,0,0,319,84,1,0,0,0,320,
        321,5,37,0,0,321,322,5,61,0,0,322,86,1,0,0,0,323,324,5,46,0,0,324,
        88,1,0,0,0,325,326,5,58,0,0,326,90,1,0,0,0,327,328,5,40,0,0,328,
        92,1,0,0,0,329,330,5,41,0,0,330,94,1,0,0,0,331,332,5,123,0,0,332,
        96,1,0,0,0,333,334,5,125,0,0,334,98,1,0,0,0,335,336,5,91,0,0,336,
        100,1,0,0,0,337,338,5,93,0,0,338,102,1,0,0,0,339,340,5,59,0,0,340,
        104,1,0,0,0,341,342,5,44,0,0,342,106,1,0,0,0,343,347,7,0,0,0,344,
        346,7,1,0,0,345,344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,
        348,1,0,0,0,348,108,1,0,0,0,349,347,1,0,0,0,350,351,7,2,0,0,351,
        110,1,0,0,0,352,354,7,3,0,0,353,355,7,4,0,0,354,353,1,0,0,0,354,
        355,1,0,0,0,355,357,1,0,0,0,356,358,3,109,54,0,357,356,1,0,0,0,358,
        359,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,112,1,0,0,0,361,
        363,3,109,54,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,
        365,1,0,0,0,365,366,1,0,0,0,366,370,5,46,0,0,367,369,3,109,54,0,
        368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,
        371,374,1,0,0,0,372,370,1,0,0,0,373,375,3,111,55,0,374,373,1,0,0,
        0,374,375,1,0,0,0,375,393,1,0,0,0,376,378,5,46,0,0,377,379,3,109,
        54,0,378,377,1,0,0,0,379,380,1,0,0,0,380,378,1,0,0,0,380,381,1,0,
        0,0,381,383,1,0,0,0,382,384,3,111,55,0,383,382,1,0,0,0,383,384,1,
        0,0,0,384,393,1,0,0,0,385,387,3,109,54,0,386,385,1,0,0,0,387,388,
        1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,
        3,111,55,0,391,393,1,0,0,0,392,362,1,0,0,0,392,376,1,0,0,0,392,386,
        1,0,0,0,393,114,1,0,0,0,394,403,5,48,0,0,395,399,7,5,0,0,396,398,
        3,109,54,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,
        1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,402,394,1,0,0,0,402,395,
        1,0,0,0,403,116,1,0,0,0,404,405,5,48,0,0,405,409,5,98,0,0,406,407,
        5,48,0,0,407,409,5,66,0,0,408,404,1,0,0,0,408,406,1,0,0,0,409,411,
        1,0,0,0,410,412,7,6,0,0,411,410,1,0,0,0,412,413,1,0,0,0,413,411,
        1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,6,58,0,0,416,118,
        1,0,0,0,417,418,5,48,0,0,418,422,5,111,0,0,419,420,5,48,0,0,420,
        422,5,79,0,0,421,417,1,0,0,0,421,419,1,0,0,0,422,424,1,0,0,0,423,
        425,7,7,0,0,424,423,1,0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,
        427,1,0,0,0,427,428,1,0,0,0,428,429,6,59,1,0,429,120,1,0,0,0,430,
        431,5,48,0,0,431,435,5,120,0,0,432,433,5,48,0,0,433,435,5,88,0,0,
        434,430,1,0,0,0,434,432,1,0,0,0,435,437,1,0,0,0,436,438,7,8,0,0,
        437,436,1,0,0,0,438,439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,
        440,441,1,0,0,0,441,442,6,60,2,0,442,122,1,0,0,0,443,448,5,34,0,
        0,444,447,3,141,70,0,445,447,8,9,0,0,446,444,1,0,0,0,446,445,1,0,
        0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,451,1,0,
        0,0,450,448,1,0,0,0,451,452,5,34,0,0,452,453,6,61,3,0,453,124,1,
        0,0,0,454,457,3,43,21,0,455,457,3,45,22,0,456,454,1,0,0,0,456,455,
        1,0,0,0,457,126,1,0,0,0,458,460,7,10,0,0,459,458,1,0,0,0,460,461,
        1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,
        6,63,4,0,464,128,1,0,0,0,465,466,5,47,0,0,466,467,5,47,0,0,467,471,
        1,0,0,0,468,470,8,11,0,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,
        1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,
        6,64,4,0,475,130,1,0,0,0,476,477,5,47,0,0,477,478,5,42,0,0,478,483,
        1,0,0,0,479,482,3,131,65,0,480,482,9,0,0,0,481,479,1,0,0,0,481,480,
        1,0,0,0,482,485,1,0,0,0,483,484,1,0,0,0,483,481,1,0,0,0,484,486,
        1,0,0,0,485,483,1,0,0,0,486,487,5,42,0,0,487,488,5,47,0,0,488,489,
        1,0,0,0,489,490,6,65,4,0,490,132,1,0,0,0,491,492,9,0,0,0,492,493,
        6,66,5,0,493,134,1,0,0,0,494,499,5,34,0,0,495,498,8,9,0,0,496,498,
        3,141,70,0,497,495,1,0,0,0,497,496,1,0,0,0,498,501,1,0,0,0,499,497,
        1,0,0,0,499,500,1,0,0,0,500,505,1,0,0,0,501,499,1,0,0,0,502,506,
        7,12,0,0,503,504,5,13,0,0,504,506,5,10,0,0,505,502,1,0,0,0,505,503,
        1,0,0,0,506,507,1,0,0,0,507,508,6,67,6,0,508,136,1,0,0,0,509,514,
        5,34,0,0,510,513,8,13,0,0,511,513,3,141,70,0,512,510,1,0,0,0,512,
        511,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,
        521,1,0,0,0,516,514,1,0,0,0,517,522,7,14,0,0,518,522,3,139,69,0,
        519,520,7,15,0,0,520,522,8,16,0,0,521,517,1,0,0,0,521,518,1,0,0,
        0,521,519,1,0,0,0,522,523,1,0,0,0,523,524,6,68,7,0,524,138,1,0,0,
        0,525,526,5,92,0,0,526,527,8,17,0,0,527,140,1,0,0,0,528,529,5,92,
        0,0,529,533,7,17,0,0,530,531,7,15,0,0,531,533,7,16,0,0,532,528,1,
        0,0,0,532,530,1,0,0,0,533,142,1,0,0,0,34,0,153,347,354,359,364,370,
        374,380,383,388,392,399,402,408,413,421,426,434,439,446,448,456,
        461,471,481,483,497,499,505,512,514,521,532,8,1,58,0,1,59,1,1,60,
        2,1,61,3,6,0,0,1,66,4,1,67,5,1,68,6
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    REL = 3
    IF = 4
    ELSE = 5
    FOR = 6
    RETURN = 7
    FUNC = 8
    TYPE = 9
    STRUCT = 10
    INTERFACE = 11
    STRING = 12
    INT = 13
    FLOAT = 14
    BOOLEAN = 15
    CONST = 16
    VAR = 17
    CONTINUE = 18
    BREAK = 19
    RANGE = 20
    NIL = 21
    TRUE = 22
    FALSE = 23
    NOT = 24
    ADD = 25
    MINUS = 26
    MUL = 27
    DIV = 28
    MOD = 29
    EQUAL = 30
    DIFF = 31
    LT = 32
    GT = 33
    LE = 34
    GE = 35
    OR = 36
    AND = 37
    ASSIGN = 38
    ADD_ASSIGN = 39
    MINUS_ASSIGN = 40
    MULT_ASSIGN = 41
    DIV_ASSIGN = 42
    REM_ASSIGN = 43
    DOT = 44
    COLON = 45
    LPAREN = 46
    RPAREN = 47
    LBRACE = 48
    RBRACE = 49
    LBRACK = 50
    RBRACK = 51
    SEMI = 52
    COMMA = 53
    ID = 54
    FLOAT_LIT = 55
    DEC_LIT = 56
    BIN_LIT = 57
    OCT_LIT = 58
    HEX_LIT = 59
    STR_LIT = 60
    BOOL_LIT = 61
    WS = 62
    LINE_COMMENT = 63
    BLOCK_COMMENT = 64
    ERROR_CHAR = 65
    UNCLOSE_STRING = 66
    ILLEGAL_ESCAPE = 67

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\\r'", "'\\n'", "'if'", "'else'", "'for'", "'return'", "'func'", 
            "'type'", "'struct'", "'interface'", "'string'", "'int'", "'float'", 
            "'boolean'", "'const'", "'var'", "'continue'", "'break'", "'range'", 
            "'nil'", "'true'", "'false'", "'!'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'||'", 
            "'&&'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "REL", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
            "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", 
            "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "NOT", 
            "ADD", "MINUS", "MUL", "DIV", "MOD", "EQUAL", "DIFF", "LT", 
            "GT", "LE", "GE", "OR", "AND", "ASSIGN", "ADD_ASSIGN", "MINUS_ASSIGN", 
            "MULT_ASSIGN", "DIV_ASSIGN", "REM_ASSIGN", "DOT", "COLON", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
            "ID", "FLOAT_LIT", "DEC_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", 
            "STR_LIT", "BOOL_LIT", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
            "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "REL", "IF", "ELSE", "FOR", "RETURN", 
                  "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", 
                  "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", 
                  "RANGE", "NIL", "TRUE", "FALSE", "NOT", "ADD", "MINUS", 
                  "MUL", "DIV", "MOD", "EQUAL", "DIFF", "LT", "GT", "LE", 
                  "GE", "OR", "AND", "ASSIGN", "ADD_ASSIGN", "MINUS_ASSIGN", 
                  "MULT_ASSIGN", "DIV_ASSIGN", "REM_ASSIGN", "DOT", "COLON", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                  "SEMI", "COMMA", "ID", "DIGIT", "EXP", "FLOAT_LIT", "DEC_LIT", 
                  "BIN_LIT", "OCT_LIT", "HEX_LIT", "STR_LIT", "BOOL_LIT", 
                  "WS", "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "IllegalEscape", "ESCAPE_SEQ" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[58] = self.BIN_LIT_action 
            actions[59] = self.OCT_LIT_action 
            actions[60] = self.HEX_LIT_action 
            actions[61] = self.STR_LIT_action 
            actions[66] = self.ERROR_CHAR_action 
            actions[67] = self.UNCLOSE_STRING_action 
            actions[68] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def BIN_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                        self.text = str(int(self.text, 2))
                    
     

    def OCT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
               
                        self.text = str(int(self.text, 8))
                    
     

    def HEX_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                        self.text = str(int(self.text, 16))
                    
     

    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[1:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[1:-1])
                else:
                    raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:

            	raise IllegalEscape(self.text[1:])

     


