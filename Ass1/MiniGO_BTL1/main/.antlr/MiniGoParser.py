# Generated from d:/HCMUT/PPL/2/BTL1/Ass1/MiniGO_BTL1/main/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,68,830,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        1,0,5,0,134,8,0,10,0,12,0,137,9,0,1,0,1,0,1,0,1,1,1,1,1,1,5,1,145,
        8,1,10,1,12,1,148,9,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,156,8,2,1,3,1,
        3,1,3,3,3,161,8,3,1,3,1,3,3,3,165,8,3,1,3,1,3,5,3,169,8,3,10,3,12,
        3,172,9,3,1,4,1,4,1,4,3,4,177,8,4,1,4,1,4,1,4,3,4,182,8,4,1,4,5,
        4,185,8,4,10,4,12,4,188,9,4,1,5,1,5,1,5,1,5,1,5,5,5,195,8,5,10,5,
        12,5,198,9,5,1,5,3,5,201,8,5,1,5,1,5,1,5,3,5,206,8,5,1,5,5,5,209,
        8,5,10,5,12,5,212,9,5,1,6,1,6,1,6,1,6,3,6,218,8,6,1,7,1,7,1,7,3,
        7,223,8,7,1,7,1,7,5,7,227,8,7,10,7,12,7,230,9,7,1,7,1,7,1,7,1,7,
        3,7,236,8,7,1,7,5,7,239,8,7,10,7,12,7,242,9,7,3,7,244,8,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,255,8,8,1,8,1,8,5,8,259,8,8,10,
        8,12,8,262,9,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,270,8,9,1,10,1,10,1,10,
        1,10,5,10,276,8,10,10,10,12,10,279,9,10,1,10,1,10,5,10,283,8,10,
        10,10,12,10,286,9,10,1,10,3,10,289,8,10,1,10,1,10,3,10,293,8,10,
        1,10,5,10,296,8,10,10,10,12,10,299,9,10,1,11,1,11,1,11,1,11,3,11,
        305,8,11,1,12,1,12,1,12,1,12,1,12,3,12,312,8,12,1,12,3,12,315,8,
        12,1,12,5,12,318,8,12,10,12,12,12,321,9,12,1,13,1,13,1,13,1,13,1,
        13,3,13,328,8,13,1,14,1,14,3,14,332,8,14,1,14,3,14,335,8,14,1,15,
        1,15,1,15,1,15,1,15,1,15,3,15,343,8,15,1,15,1,15,5,15,347,8,15,10,
        15,12,15,350,9,15,1,16,1,16,1,16,1,16,1,16,3,16,357,8,16,1,17,1,
        17,1,17,3,17,362,8,17,1,18,1,18,5,18,366,8,18,10,18,12,18,369,9,
        18,1,18,3,18,372,8,18,1,18,1,18,5,18,376,8,18,10,18,12,18,379,9,
        18,1,19,1,19,1,19,1,19,3,19,385,8,19,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,3,20,395,8,20,1,21,1,21,5,21,399,8,21,10,21,12,21,402,
        9,21,1,21,1,21,5,21,406,8,21,10,21,12,21,409,9,21,3,21,411,8,21,
        1,22,1,22,1,22,1,22,3,22,417,8,22,1,22,5,22,420,8,22,10,22,12,22,
        423,9,22,1,23,1,23,1,23,1,23,3,23,429,8,23,1,24,1,24,1,24,1,24,1,
        24,3,24,436,8,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,5,26,445,8,26,
        10,26,12,26,448,9,26,1,26,1,26,3,26,452,8,26,1,26,3,26,455,8,26,
        1,26,5,26,458,8,26,10,26,12,26,461,9,26,1,27,1,27,1,27,1,27,3,27,
        467,8,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,475,8,28,10,28,12,28,
        478,9,28,1,28,1,28,1,29,1,29,5,29,484,8,29,10,29,12,29,487,9,29,
        1,29,1,29,1,30,1,30,1,30,5,30,494,8,30,10,30,12,30,497,9,30,1,30,
        1,30,5,30,501,8,30,10,30,12,30,504,9,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,5,30,513,8,30,10,30,12,30,516,9,30,1,30,1,30,5,30,520,
        8,30,10,30,12,30,523,9,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,531,
        8,30,10,30,12,30,534,9,30,1,30,1,30,5,30,538,8,30,10,30,12,30,541,
        9,30,3,30,543,8,30,1,31,1,31,1,31,3,31,548,8,31,1,31,1,31,3,31,552,
        8,31,1,31,1,31,1,31,3,31,557,8,31,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,3,33,566,8,33,1,33,5,33,569,8,33,10,33,12,33,572,9,33,1,34,
        1,34,1,34,3,34,577,8,34,1,34,1,34,1,34,3,34,582,8,34,1,34,5,34,585,
        8,34,10,34,12,34,588,9,34,1,35,1,35,1,35,3,35,593,8,35,1,35,5,35,
        596,8,35,10,35,12,35,599,9,35,1,36,1,36,3,36,603,8,36,1,36,1,36,
        3,36,607,8,36,1,36,5,36,610,8,36,10,36,12,36,613,9,36,1,37,1,37,
        1,37,1,37,1,37,3,37,620,8,37,1,38,1,38,1,38,1,38,1,38,1,38,5,38,
        628,8,38,10,38,12,38,631,9,38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,
        639,8,39,10,39,12,39,642,9,39,1,40,1,40,1,40,1,40,1,40,1,40,5,40,
        650,8,40,10,40,12,40,653,9,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,
        661,8,41,10,41,12,41,664,9,41,1,42,1,42,1,42,1,42,1,42,1,42,5,42,
        672,8,42,10,42,12,42,675,9,42,1,43,1,43,1,43,3,43,680,8,43,1,44,
        1,44,1,44,3,44,685,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,3,44,697,8,44,1,44,3,44,700,8,44,5,44,702,8,44,10,44,12,
        44,705,9,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,714,8,45,1,46,
        1,46,1,46,3,46,719,8,46,1,46,1,46,3,46,723,8,46,1,47,1,47,1,47,1,
        47,3,47,729,8,47,1,47,3,47,732,8,47,1,47,3,47,735,8,47,1,48,1,48,
        1,48,3,48,740,8,48,1,49,1,49,1,50,1,50,3,50,746,8,50,1,51,1,51,1,
        52,1,52,1,53,1,53,3,53,754,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,3,54,765,8,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,773,
        8,55,1,56,1,56,1,56,3,56,778,8,56,1,56,1,56,1,57,1,57,3,57,784,8,
        57,1,57,1,57,1,57,1,57,3,57,790,8,57,3,57,792,8,57,1,58,1,58,1,58,
        1,58,1,59,1,59,1,59,3,59,801,8,59,1,59,1,59,1,60,1,60,1,60,1,60,
        3,60,809,8,60,1,60,1,60,3,60,813,8,60,3,60,815,8,60,1,61,1,61,1,
        62,1,62,1,63,1,63,1,64,1,64,1,65,3,65,826,8,65,1,65,1,65,1,65,0,
        6,76,78,80,82,84,88,66,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
        32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
        76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,0,8,2,0,1,1,40,44,2,0,1,1,39,
        39,1,0,26,27,1,0,28,30,2,0,25,25,27,27,2,0,13,16,22,22,1,0,56,59,
        1,0,23,24,892,0,135,1,0,0,0,2,141,1,0,0,0,4,155,1,0,0,0,6,157,1,
        0,0,0,8,173,1,0,0,0,10,189,1,0,0,0,12,217,1,0,0,0,14,243,1,0,0,0,
        16,245,1,0,0,0,18,269,1,0,0,0,20,271,1,0,0,0,22,304,1,0,0,0,24,306,
        1,0,0,0,26,327,1,0,0,0,28,334,1,0,0,0,30,336,1,0,0,0,32,356,1,0,
        0,0,34,361,1,0,0,0,36,363,1,0,0,0,38,384,1,0,0,0,40,394,1,0,0,0,
        42,410,1,0,0,0,44,412,1,0,0,0,46,428,1,0,0,0,48,435,1,0,0,0,50,437,
        1,0,0,0,52,439,1,0,0,0,54,466,1,0,0,0,56,468,1,0,0,0,58,481,1,0,
        0,0,60,542,1,0,0,0,62,556,1,0,0,0,64,558,1,0,0,0,66,562,1,0,0,0,
        68,573,1,0,0,0,70,589,1,0,0,0,72,600,1,0,0,0,74,619,1,0,0,0,76,621,
        1,0,0,0,78,632,1,0,0,0,80,643,1,0,0,0,82,654,1,0,0,0,84,665,1,0,
        0,0,86,679,1,0,0,0,88,684,1,0,0,0,90,713,1,0,0,0,92,715,1,0,0,0,
        94,724,1,0,0,0,96,739,1,0,0,0,98,741,1,0,0,0,100,745,1,0,0,0,102,
        747,1,0,0,0,104,749,1,0,0,0,106,751,1,0,0,0,108,764,1,0,0,0,110,
        772,1,0,0,0,112,774,1,0,0,0,114,791,1,0,0,0,116,793,1,0,0,0,118,
        797,1,0,0,0,120,814,1,0,0,0,122,816,1,0,0,0,124,818,1,0,0,0,126,
        820,1,0,0,0,128,822,1,0,0,0,130,825,1,0,0,0,132,134,3,130,65,0,133,
        132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,
        138,1,0,0,0,137,135,1,0,0,0,138,139,3,2,1,0,139,140,5,0,0,1,140,
        1,1,0,0,0,141,146,3,4,2,0,142,145,3,4,2,0,143,145,3,130,65,0,144,
        142,1,0,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,
        147,1,0,0,0,147,3,1,0,0,0,148,146,1,0,0,0,149,156,3,6,3,0,150,156,
        3,8,4,0,151,156,3,30,15,0,152,156,3,16,8,0,153,156,3,10,5,0,154,
        156,3,20,10,0,155,149,1,0,0,0,155,150,1,0,0,0,155,151,1,0,0,0,155,
        152,1,0,0,0,155,153,1,0,0,0,155,154,1,0,0,0,156,5,1,0,0,0,157,158,
        5,18,0,0,158,160,5,55,0,0,159,161,3,96,48,0,160,159,1,0,0,0,160,
        161,1,0,0,0,161,164,1,0,0,0,162,163,5,39,0,0,163,165,3,74,37,0,164,
        162,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,170,5,53,0,0,167,
        169,3,130,65,0,168,167,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,
        171,1,0,0,0,171,7,1,0,0,0,172,170,1,0,0,0,173,174,5,17,0,0,174,176,
        5,55,0,0,175,177,3,96,48,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,
        1,0,0,0,178,179,5,39,0,0,179,181,3,74,37,0,180,182,5,53,0,0,181,
        180,1,0,0,0,181,182,1,0,0,0,182,186,1,0,0,0,183,185,3,130,65,0,184,
        183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,
        9,1,0,0,0,188,186,1,0,0,0,189,190,5,10,0,0,190,191,5,55,0,0,191,
        192,5,11,0,0,192,196,5,49,0,0,193,195,3,130,65,0,194,193,1,0,0,0,
        195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,200,1,0,0,0,
        198,196,1,0,0,0,199,201,3,12,6,0,200,199,1,0,0,0,200,201,1,0,0,0,
        201,202,1,0,0,0,202,205,5,50,0,0,203,206,5,53,0,0,204,206,3,130,
        65,0,205,203,1,0,0,0,205,204,1,0,0,0,206,210,1,0,0,0,207,209,3,130,
        65,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,
        0,0,211,11,1,0,0,0,212,210,1,0,0,0,213,214,3,14,7,0,214,215,3,12,
        6,0,215,218,1,0,0,0,216,218,3,14,7,0,217,213,1,0,0,0,217,216,1,0,
        0,0,218,13,1,0,0,0,219,222,5,55,0,0,220,223,3,98,49,0,221,223,3,
        106,53,0,222,220,1,0,0,0,222,221,1,0,0,0,223,224,1,0,0,0,224,228,
        5,53,0,0,225,227,3,130,65,0,226,225,1,0,0,0,227,230,1,0,0,0,228,
        226,1,0,0,0,228,229,1,0,0,0,229,244,1,0,0,0,230,228,1,0,0,0,231,
        232,5,55,0,0,232,235,3,100,50,0,233,236,5,53,0,0,234,236,3,130,65,
        0,235,233,1,0,0,0,235,234,1,0,0,0,236,240,1,0,0,0,237,239,3,130,
        65,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,
        0,0,241,244,1,0,0,0,242,240,1,0,0,0,243,219,1,0,0,0,243,231,1,0,
        0,0,244,15,1,0,0,0,245,246,5,9,0,0,246,247,5,47,0,0,247,248,3,18,
        9,0,248,249,5,48,0,0,249,250,5,55,0,0,250,251,5,47,0,0,251,252,3,
        32,16,0,252,254,5,48,0,0,253,255,3,96,48,0,254,253,1,0,0,0,254,255,
        1,0,0,0,255,256,1,0,0,0,256,260,3,36,18,0,257,259,3,130,65,0,258,
        257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
        17,1,0,0,0,262,260,1,0,0,0,263,264,5,55,0,0,264,265,3,100,50,0,265,
        266,3,18,9,0,266,270,1,0,0,0,267,268,5,55,0,0,268,270,3,100,50,0,
        269,263,1,0,0,0,269,267,1,0,0,0,270,19,1,0,0,0,271,272,5,10,0,0,
        272,273,5,55,0,0,273,277,5,12,0,0,274,276,3,130,65,0,275,274,1,0,
        0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,
        0,0,279,277,1,0,0,0,280,284,5,49,0,0,281,283,3,130,65,0,282,281,
        1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,288,
        1,0,0,0,286,284,1,0,0,0,287,289,3,22,11,0,288,287,1,0,0,0,288,289,
        1,0,0,0,289,290,1,0,0,0,290,292,5,50,0,0,291,293,5,53,0,0,292,291,
        1,0,0,0,292,293,1,0,0,0,293,297,1,0,0,0,294,296,3,130,65,0,295,294,
        1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,21,1,
        0,0,0,299,297,1,0,0,0,300,301,3,24,12,0,301,302,3,22,11,0,302,305,
        1,0,0,0,303,305,3,24,12,0,304,300,1,0,0,0,304,303,1,0,0,0,305,23,
        1,0,0,0,306,307,5,55,0,0,307,308,5,47,0,0,308,309,3,26,13,0,309,
        311,5,48,0,0,310,312,3,96,48,0,311,310,1,0,0,0,311,312,1,0,0,0,312,
        314,1,0,0,0,313,315,5,53,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,
        319,1,0,0,0,316,318,3,130,65,0,317,316,1,0,0,0,318,321,1,0,0,0,319,
        317,1,0,0,0,319,320,1,0,0,0,320,25,1,0,0,0,321,319,1,0,0,0,322,323,
        3,28,14,0,323,324,5,54,0,0,324,325,3,26,13,0,325,328,1,0,0,0,326,
        328,3,28,14,0,327,322,1,0,0,0,327,326,1,0,0,0,328,27,1,0,0,0,329,
        331,5,55,0,0,330,332,3,96,48,0,331,330,1,0,0,0,331,332,1,0,0,0,332,
        335,1,0,0,0,333,335,1,0,0,0,334,329,1,0,0,0,334,333,1,0,0,0,335,
        29,1,0,0,0,336,337,5,9,0,0,337,338,5,55,0,0,338,339,5,47,0,0,339,
        340,3,32,16,0,340,342,5,48,0,0,341,343,3,96,48,0,342,341,1,0,0,0,
        342,343,1,0,0,0,343,344,1,0,0,0,344,348,3,36,18,0,345,347,3,130,
        65,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,
        0,0,349,31,1,0,0,0,350,348,1,0,0,0,351,352,3,34,17,0,352,353,5,54,
        0,0,353,354,3,32,16,0,354,357,1,0,0,0,355,357,3,34,17,0,356,351,
        1,0,0,0,356,355,1,0,0,0,357,33,1,0,0,0,358,359,5,55,0,0,359,362,
        3,96,48,0,360,362,1,0,0,0,361,358,1,0,0,0,361,360,1,0,0,0,362,35,
        1,0,0,0,363,367,5,49,0,0,364,366,3,130,65,0,365,364,1,0,0,0,366,
        369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,371,1,0,0,0,369,
        367,1,0,0,0,370,372,3,38,19,0,371,370,1,0,0,0,371,372,1,0,0,0,372,
        373,1,0,0,0,373,377,5,50,0,0,374,376,3,130,65,0,375,374,1,0,0,0,
        376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,37,1,0,0,0,379,
        377,1,0,0,0,380,381,3,40,20,0,381,382,3,38,19,0,382,385,1,0,0,0,
        383,385,3,40,20,0,384,380,1,0,0,0,384,383,1,0,0,0,385,39,1,0,0,0,
        386,395,3,42,21,0,387,395,3,44,22,0,388,395,3,52,26,0,389,395,3,
        60,30,0,390,395,3,66,33,0,391,395,3,70,35,0,392,395,3,68,34,0,393,
        395,3,72,36,0,394,386,1,0,0,0,394,387,1,0,0,0,394,388,1,0,0,0,394,
        389,1,0,0,0,394,390,1,0,0,0,394,391,1,0,0,0,394,392,1,0,0,0,394,
        393,1,0,0,0,395,41,1,0,0,0,396,400,3,6,3,0,397,399,3,130,65,0,398,
        397,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,
        411,1,0,0,0,402,400,1,0,0,0,403,407,3,8,4,0,404,406,3,130,65,0,405,
        404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,
        411,1,0,0,0,409,407,1,0,0,0,410,396,1,0,0,0,410,403,1,0,0,0,411,
        43,1,0,0,0,412,413,3,46,23,0,413,414,3,50,25,0,414,416,3,76,38,0,
        415,417,5,53,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,421,1,0,0,0,
        418,420,3,130,65,0,419,418,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,
        0,421,422,1,0,0,0,422,45,1,0,0,0,423,421,1,0,0,0,424,425,3,48,24,
        0,425,426,3,46,23,0,426,429,1,0,0,0,427,429,3,48,24,0,428,424,1,
        0,0,0,428,427,1,0,0,0,429,47,1,0,0,0,430,436,3,106,53,0,431,436,
        5,55,0,0,432,433,5,55,0,0,433,434,5,45,0,0,434,436,5,55,0,0,435,
        430,1,0,0,0,435,431,1,0,0,0,435,432,1,0,0,0,436,49,1,0,0,0,437,438,
        7,0,0,0,438,51,1,0,0,0,439,440,5,5,0,0,440,441,5,47,0,0,441,442,
        3,76,38,0,442,446,5,48,0,0,443,445,3,130,65,0,444,443,1,0,0,0,445,
        448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,
        446,1,0,0,0,449,451,3,36,18,0,450,452,3,54,27,0,451,450,1,0,0,0,
        451,452,1,0,0,0,452,454,1,0,0,0,453,455,3,58,29,0,454,453,1,0,0,
        0,454,455,1,0,0,0,455,459,1,0,0,0,456,458,3,130,65,0,457,456,1,0,
        0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,53,1,0,0,
        0,461,459,1,0,0,0,462,463,3,56,28,0,463,464,3,54,27,0,464,467,1,
        0,0,0,465,467,3,56,28,0,466,462,1,0,0,0,466,465,1,0,0,0,467,55,1,
        0,0,0,468,469,5,6,0,0,469,470,5,5,0,0,470,471,5,47,0,0,471,472,3,
        76,38,0,472,476,5,48,0,0,473,475,3,130,65,0,474,473,1,0,0,0,475,
        478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,
        476,1,0,0,0,479,480,3,36,18,0,480,57,1,0,0,0,481,485,5,6,0,0,482,
        484,3,130,65,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,
        486,1,0,0,0,486,488,1,0,0,0,487,485,1,0,0,0,488,489,3,36,18,0,489,
        59,1,0,0,0,490,491,5,7,0,0,491,495,3,76,38,0,492,494,3,130,65,0,
        493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,
        496,498,1,0,0,0,497,495,1,0,0,0,498,502,3,36,18,0,499,501,3,130,
        65,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,
        0,0,503,543,1,0,0,0,504,502,1,0,0,0,505,506,5,7,0,0,506,507,3,62,
        31,0,507,508,5,53,0,0,508,509,3,76,38,0,509,510,5,53,0,0,510,514,
        3,40,20,0,511,513,3,130,65,0,512,511,1,0,0,0,513,516,1,0,0,0,514,
        512,1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,514,1,0,0,0,517,
        521,3,36,18,0,518,520,3,130,65,0,519,518,1,0,0,0,520,523,1,0,0,0,
        521,519,1,0,0,0,521,522,1,0,0,0,522,543,1,0,0,0,523,521,1,0,0,0,
        524,525,5,7,0,0,525,526,5,55,0,0,526,527,5,54,0,0,527,528,3,64,32,
        0,528,532,3,76,38,0,529,531,3,130,65,0,530,529,1,0,0,0,531,534,1,
        0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,534,532,1,
        0,0,0,535,539,3,36,18,0,536,538,3,130,65,0,537,536,1,0,0,0,538,541,
        1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,543,1,0,0,0,541,539,
        1,0,0,0,542,490,1,0,0,0,542,505,1,0,0,0,542,524,1,0,0,0,543,61,1,
        0,0,0,544,545,5,18,0,0,545,547,5,55,0,0,546,548,3,96,48,0,547,546,
        1,0,0,0,547,548,1,0,0,0,548,551,1,0,0,0,549,550,5,39,0,0,550,552,
        3,76,38,0,551,549,1,0,0,0,551,552,1,0,0,0,552,557,1,0,0,0,553,554,
        5,55,0,0,554,555,7,1,0,0,555,557,3,76,38,0,556,544,1,0,0,0,556,553,
        1,0,0,0,557,63,1,0,0,0,558,559,5,55,0,0,559,560,5,1,0,0,560,561,
        5,21,0,0,561,65,1,0,0,0,562,565,5,20,0,0,563,566,5,53,0,0,564,566,
        3,130,65,0,565,563,1,0,0,0,565,564,1,0,0,0,566,570,1,0,0,0,567,569,
        3,130,65,0,568,567,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,
        1,0,0,0,571,67,1,0,0,0,572,570,1,0,0,0,573,574,3,48,24,0,574,576,
        5,47,0,0,575,577,3,74,37,0,576,575,1,0,0,0,576,577,1,0,0,0,577,578,
        1,0,0,0,578,581,5,48,0,0,579,582,5,53,0,0,580,582,3,130,65,0,581,
        579,1,0,0,0,581,580,1,0,0,0,582,586,1,0,0,0,583,585,3,130,65,0,584,
        583,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,
        69,1,0,0,0,588,586,1,0,0,0,589,592,5,19,0,0,590,593,5,53,0,0,591,
        593,3,130,65,0,592,590,1,0,0,0,592,591,1,0,0,0,593,597,1,0,0,0,594,
        596,3,130,65,0,595,594,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,
        598,1,0,0,0,598,71,1,0,0,0,599,597,1,0,0,0,600,602,5,8,0,0,601,603,
        3,76,38,0,602,601,1,0,0,0,602,603,1,0,0,0,603,606,1,0,0,0,604,607,
        5,53,0,0,605,607,3,130,65,0,606,604,1,0,0,0,606,605,1,0,0,0,607,
        611,1,0,0,0,608,610,3,130,65,0,609,608,1,0,0,0,610,613,1,0,0,0,611,
        609,1,0,0,0,611,612,1,0,0,0,612,73,1,0,0,0,613,611,1,0,0,0,614,615,
        3,76,38,0,615,616,5,54,0,0,616,617,3,74,37,0,617,620,1,0,0,0,618,
        620,3,76,38,0,619,614,1,0,0,0,619,618,1,0,0,0,620,75,1,0,0,0,621,
        622,6,38,-1,0,622,623,3,78,39,0,623,629,1,0,0,0,624,625,10,2,0,0,
        625,626,5,37,0,0,626,628,3,78,39,0,627,624,1,0,0,0,628,631,1,0,0,
        0,629,627,1,0,0,0,629,630,1,0,0,0,630,77,1,0,0,0,631,629,1,0,0,0,
        632,633,6,39,-1,0,633,634,3,80,40,0,634,640,1,0,0,0,635,636,10,2,
        0,0,636,637,5,38,0,0,637,639,3,80,40,0,638,635,1,0,0,0,639,642,1,
        0,0,0,640,638,1,0,0,0,640,641,1,0,0,0,641,79,1,0,0,0,642,640,1,0,
        0,0,643,644,6,40,-1,0,644,645,3,82,41,0,645,651,1,0,0,0,646,647,
        10,2,0,0,647,648,5,4,0,0,648,650,3,82,41,0,649,646,1,0,0,0,650,653,
        1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,81,1,0,0,0,653,651,1,
        0,0,0,654,655,6,41,-1,0,655,656,3,84,42,0,656,662,1,0,0,0,657,658,
        10,2,0,0,658,659,7,2,0,0,659,661,3,84,42,0,660,657,1,0,0,0,661,664,
        1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,83,1,0,0,0,664,662,1,
        0,0,0,665,666,6,42,-1,0,666,667,3,86,43,0,667,673,1,0,0,0,668,669,
        10,2,0,0,669,670,7,3,0,0,670,672,3,86,43,0,671,668,1,0,0,0,672,675,
        1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,85,1,0,0,0,675,673,1,
        0,0,0,676,677,7,4,0,0,677,680,3,86,43,0,678,680,3,88,44,0,679,676,
        1,0,0,0,679,678,1,0,0,0,680,87,1,0,0,0,681,682,6,44,-1,0,682,685,
        3,92,46,0,683,685,3,90,45,0,684,681,1,0,0,0,684,683,1,0,0,0,685,
        703,1,0,0,0,686,687,10,4,0,0,687,688,5,51,0,0,688,689,3,76,38,0,
        689,690,5,52,0,0,690,702,1,0,0,0,691,692,10,3,0,0,692,693,5,45,0,
        0,693,699,5,55,0,0,694,696,5,47,0,0,695,697,3,74,37,0,696,695,1,
        0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,700,5,48,0,0,699,694,1,
        0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,686,1,0,0,0,701,691,1,
        0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,89,1,0,
        0,0,705,703,1,0,0,0,706,714,3,110,55,0,707,714,5,55,0,0,708,709,
        5,47,0,0,709,710,3,76,38,0,710,711,5,48,0,0,711,714,1,0,0,0,712,
        714,5,21,0,0,713,706,1,0,0,0,713,707,1,0,0,0,713,708,1,0,0,0,713,
        712,1,0,0,0,714,91,1,0,0,0,715,716,5,55,0,0,716,718,5,47,0,0,717,
        719,3,74,37,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,
        722,5,48,0,0,721,723,3,130,65,0,722,721,1,0,0,0,722,723,1,0,0,0,
        723,93,1,0,0,0,724,725,3,76,38,0,725,726,5,45,0,0,726,728,5,55,0,
        0,727,729,5,47,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,731,1,0,0,
        0,730,732,3,74,37,0,731,730,1,0,0,0,731,732,1,0,0,0,732,734,1,0,
        0,0,733,735,5,48,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,95,1,0,
        0,0,736,740,3,98,49,0,737,740,3,100,50,0,738,740,3,106,53,0,739,
        736,1,0,0,0,739,737,1,0,0,0,739,738,1,0,0,0,740,97,1,0,0,0,741,742,
        7,5,0,0,742,99,1,0,0,0,743,746,3,102,51,0,744,746,3,104,52,0,745,
        743,1,0,0,0,745,744,1,0,0,0,746,101,1,0,0,0,747,748,5,55,0,0,748,
        103,1,0,0,0,749,750,5,55,0,0,750,105,1,0,0,0,751,753,3,108,54,0,
        752,754,3,96,48,0,753,752,1,0,0,0,753,754,1,0,0,0,754,107,1,0,0,
        0,755,756,5,51,0,0,756,757,3,122,61,0,757,758,5,52,0,0,758,759,3,
        108,54,0,759,765,1,0,0,0,760,761,5,51,0,0,761,762,3,122,61,0,762,
        763,5,52,0,0,763,765,1,0,0,0,764,755,1,0,0,0,764,760,1,0,0,0,765,
        109,1,0,0,0,766,773,3,122,61,0,767,773,5,60,0,0,768,773,5,61,0,0,
        769,773,3,126,63,0,770,773,3,118,59,0,771,773,3,112,56,0,772,766,
        1,0,0,0,772,767,1,0,0,0,772,768,1,0,0,0,772,769,1,0,0,0,772,770,
        1,0,0,0,772,771,1,0,0,0,773,111,1,0,0,0,774,775,5,55,0,0,775,777,
        5,49,0,0,776,778,3,114,57,0,777,776,1,0,0,0,777,778,1,0,0,0,778,
        779,1,0,0,0,779,780,5,50,0,0,780,113,1,0,0,0,781,783,3,116,58,0,
        782,784,3,130,65,0,783,782,1,0,0,0,783,784,1,0,0,0,784,792,1,0,0,
        0,785,786,3,116,58,0,786,787,5,54,0,0,787,789,3,114,57,0,788,790,
        3,130,65,0,789,788,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,781,
        1,0,0,0,791,785,1,0,0,0,792,115,1,0,0,0,793,794,5,55,0,0,794,795,
        5,46,0,0,795,796,3,76,38,0,796,117,1,0,0,0,797,798,3,106,53,0,798,
        800,5,49,0,0,799,801,3,120,60,0,800,799,1,0,0,0,800,801,1,0,0,0,
        801,802,1,0,0,0,802,803,5,50,0,0,803,119,1,0,0,0,804,805,5,49,0,
        0,805,815,3,120,60,0,806,808,3,74,37,0,807,809,5,50,0,0,808,807,
        1,0,0,0,808,809,1,0,0,0,809,812,1,0,0,0,810,811,5,54,0,0,811,813,
        3,120,60,0,812,810,1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,804,
        1,0,0,0,814,806,1,0,0,0,815,121,1,0,0,0,816,817,7,6,0,0,817,123,
        1,0,0,0,818,819,5,60,0,0,819,125,1,0,0,0,820,821,7,7,0,0,821,127,
        1,0,0,0,822,823,5,61,0,0,823,129,1,0,0,0,824,826,5,2,0,0,825,824,
        1,0,0,0,825,826,1,0,0,0,826,827,1,0,0,0,827,828,5,3,0,0,828,131,
        1,0,0,0,110,135,144,146,155,160,164,170,176,181,186,196,200,205,
        210,217,222,228,235,240,243,254,260,269,277,284,288,292,297,304,
        311,314,319,327,331,334,342,348,356,361,367,371,377,384,394,400,
        407,410,416,421,428,435,446,451,454,459,466,476,485,495,502,514,
        521,532,539,542,547,551,556,565,570,576,581,586,592,597,602,606,
        611,619,629,640,651,662,673,679,684,696,699,701,703,713,718,722,
        728,731,734,739,745,753,764,772,777,783,789,791,800,808,812,814,
        825
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "':='", "'\\r'", "'\\n'", "<INVALID>", 
                     "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", 
                     "'struct'", "'interface'", "'string'", "'int'", "'float'", 
                     "'boolean'", "'const'", "'var'", "'continue'", "'break'", 
                     "'range'", "'nil'", "'true'", "'false'", "'!'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", 
                     "'>'", "'<='", "'>='", "'||'", "'&&'", "'='", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'.'", "':'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "REL", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
                      "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
                      "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", 
                      "TRUE", "FALSE", "NOT", "ADD", "MINUS", "MUL", "DIV", 
                      "MOD", "EQUAL", "DIFF", "LT", "GT", "LE", "GE", "OR", 
                      "AND", "ASSIGN", "ADD_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
                      "DIV_ASSIGN", "REM_ASSIGN", "DOT", "COLON", "LPAREN", 
                      "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                      "SEMI", "COMMA", "ID", "DEC_LIT", "BIN_LIT", "OCT_LIT", 
                      "HEX_LIT", "FLOAT_LIT", "STR_LIT", "BOOL_LIT", "WS", 
                      "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "UNCLOSE_STRING", 
                      "ILLEGAL_ESCAPE" ]

    RULE_program = 0
    RULE_decllist = 1
    RULE_decl = 2
    RULE_variable_decl = 3
    RULE_const_decl = 4
    RULE_struct_decl = 5
    RULE_struct_fields = 6
    RULE_struct_field = 7
    RULE_method_decl = 8
    RULE_method_para = 9
    RULE_interface_decl = 10
    RULE_interface_method_list = 11
    RULE_interface_method = 12
    RULE_interface_para_list = 13
    RULE_interface_para = 14
    RULE_func_decl = 15
    RULE_list_para = 16
    RULE_para = 17
    RULE_block_statement = 18
    RULE_list_statement = 19
    RULE_statement = 20
    RULE_declared_statement = 21
    RULE_assign_statement = 22
    RULE_lhs_list = 23
    RULE_lhs = 24
    RULE_ass_operator = 25
    RULE_if_statement = 26
    RULE_list_else_if_statement = 27
    RULE_else_if_statement = 28
    RULE_else_statement = 29
    RULE_for_statement = 30
    RULE_init_for_statement = 31
    RULE_value_assign = 32
    RULE_break_statement = 33
    RULE_call_statement = 34
    RULE_continue_statement = 35
    RULE_return_statement = 36
    RULE_list_expr = 37
    RULE_expr = 38
    RULE_and_expr = 39
    RULE_rela_expr = 40
    RULE_add_expr = 41
    RULE_mul_expr = 42
    RULE_unary_expr = 43
    RULE_primary_expr = 44
    RULE_exprd = 45
    RULE_func_call = 46
    RULE_method_call = 47
    RULE_types = 48
    RULE_primitive_types = 49
    RULE_composite_types = 50
    RULE_struct_type = 51
    RULE_interface_type = 52
    RULE_arr_type = 53
    RULE_index_operator = 54
    RULE_literals = 55
    RULE_struct_lit = 56
    RULE_list_field = 57
    RULE_field = 58
    RULE_arr_lit = 59
    RULE_arr_list = 60
    RULE_int_lit = 61
    RULE_float_lit = 62
    RULE_bool_lit = 63
    RULE_str_lit = 64
    RULE_newline = 65

    ruleNames =  [ "program", "decllist", "decl", "variable_decl", "const_decl", 
                   "struct_decl", "struct_fields", "struct_field", "method_decl", 
                   "method_para", "interface_decl", "interface_method_list", 
                   "interface_method", "interface_para_list", "interface_para", 
                   "func_decl", "list_para", "para", "block_statement", 
                   "list_statement", "statement", "declared_statement", 
                   "assign_statement", "lhs_list", "lhs", "ass_operator", 
                   "if_statement", "list_else_if_statement", "else_if_statement", 
                   "else_statement", "for_statement", "init_for_statement", 
                   "value_assign", "break_statement", "call_statement", 
                   "continue_statement", "return_statement", "list_expr", 
                   "expr", "and_expr", "rela_expr", "add_expr", "mul_expr", 
                   "unary_expr", "primary_expr", "exprd", "func_call", "method_call", 
                   "types", "primitive_types", "composite_types", "struct_type", 
                   "interface_type", "arr_type", "index_operator", "literals", 
                   "struct_lit", "list_field", "field", "arr_lit", "arr_list", 
                   "int_lit", "float_lit", "bool_lit", "str_lit", "newline" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    REL=4
    IF=5
    ELSE=6
    FOR=7
    RETURN=8
    FUNC=9
    TYPE=10
    STRUCT=11
    INTERFACE=12
    STRING=13
    INT=14
    FLOAT=15
    BOOLEAN=16
    CONST=17
    VAR=18
    CONTINUE=19
    BREAK=20
    RANGE=21
    NIL=22
    TRUE=23
    FALSE=24
    NOT=25
    ADD=26
    MINUS=27
    MUL=28
    DIV=29
    MOD=30
    EQUAL=31
    DIFF=32
    LT=33
    GT=34
    LE=35
    GE=36
    OR=37
    AND=38
    ASSIGN=39
    ADD_ASSIGN=40
    MINUS_ASSIGN=41
    MULT_ASSIGN=42
    DIV_ASSIGN=43
    REM_ASSIGN=44
    DOT=45
    COLON=46
    LPAREN=47
    RPAREN=48
    LBRACE=49
    RBRACE=50
    LBRACK=51
    RBRACK=52
    SEMI=53
    COMMA=54
    ID=55
    DEC_LIT=56
    BIN_LIT=57
    OCT_LIT=58
    HEX_LIT=59
    FLOAT_LIT=60
    STR_LIT=61
    BOOL_LIT=62
    WS=63
    LINE_COMMENT=64
    BLOCK_COMMENT=65
    ERROR_CHAR=66
    UNCLOSE_STRING=67
    ILLEGAL_ESCAPE=68

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decllist(self):
            return self.getTypedRuleContext(MiniGoParser.DecllistContext,0)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_program




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 132
                self.newline()
                self.state = 137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 138
            self.decllist()
            self.state = 139
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecllistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.DeclContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.DeclContext,i)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decllist




    def decllist(self):

        localctx = MiniGoParser.DecllistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_decllist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self.decl()
            self.state = 146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 394764) != 0):
                self.state = 144
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9, 10, 17, 18]:
                    self.state = 142
                    self.decl()
                    pass
                elif token in [2, 3]:
                    self.state = 143
                    self.newline()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Variable_declContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def func_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Func_declContext,0)


        def method_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declContext,0)


        def struct_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declContext,0)


        def interface_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decl




    def decl(self):

        localctx = MiniGoParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_decl)
        try:
            self.state = 155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 149
                self.variable_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 150
                self.const_decl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 151
                self.func_decl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 152
                self.method_decl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 153
                self.struct_decl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 154
                self.interface_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_variable_decl




    def variable_decl(self):

        localctx = MiniGoParser.Variable_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_variable_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self.match(MiniGoParser.VAR)
            self.state = 158
            self.match(MiniGoParser.ID)
            self.state = 160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596836966400) != 0):
                self.state = 159
                self.types()


            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 162
                self.match(MiniGoParser.ASSIGN)
                self.state = 163
                self.list_expr()


            self.state = 166
            self.match(MiniGoParser.SEMI)
            self.state = 170
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 167
                    self.newline() 
                self.state = 172
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_const_decl




    def const_decl(self):

        localctx = MiniGoParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_const_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(MiniGoParser.CONST)
            self.state = 174
            self.match(MiniGoParser.ID)
            self.state = 176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596836966400) != 0):
                self.state = 175
                self.types()


            self.state = 178
            self.match(MiniGoParser.ASSIGN)
            self.state = 179
            self.list_expr()
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 180
                self.match(MiniGoParser.SEMI)


            self.state = 186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 183
                    self.newline() 
                self.state = 188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def struct_fields(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_fieldsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_decl




    def struct_decl(self):

        localctx = MiniGoParser.Struct_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_struct_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(MiniGoParser.TYPE)
            self.state = 190
            self.match(MiniGoParser.ID)
            self.state = 191
            self.match(MiniGoParser.STRUCT)
            self.state = 192
            self.match(MiniGoParser.LBRACE)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 193
                self.newline()
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 199
                self.struct_fields()


            self.state = 202
            self.match(MiniGoParser.RBRACE)
            self.state = 205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 203
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 204
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 207
                    self.newline() 
                self.state = 212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_fieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_field(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_fieldContext,0)


        def struct_fields(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_fieldsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_fields




    def struct_fields(self):

        localctx = MiniGoParser.Struct_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_struct_fields)
        try:
            self.state = 217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.struct_field()
                self.state = 214
                self.struct_fields()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 216
                self.struct_field()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def primitive_types(self):
            return self.getTypedRuleContext(MiniGoParser.Primitive_typesContext,0)


        def arr_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_typeContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def composite_types(self):
            return self.getTypedRuleContext(MiniGoParser.Composite_typesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field




    def struct_field(self):

        localctx = MiniGoParser.Struct_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_struct_field)
        self._la = 0 # Token type
        try:
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 219
                self.match(MiniGoParser.ID)
                self.state = 222
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 14, 15, 16, 22]:
                    self.state = 220
                    self.primitive_types()
                    pass
                elif token in [51]:
                    self.state = 221
                    self.arr_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 224
                self.match(MiniGoParser.SEMI)
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 225
                    self.newline()
                    self.state = 230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 231
                self.match(MiniGoParser.ID)
                self.state = 232
                self.composite_types()
                self.state = 235
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53]:
                    self.state = 233
                    self.match(MiniGoParser.SEMI)
                    pass
                elif token in [2, 3]:
                    self.state = 234
                    self.newline()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 237
                    self.newline()
                    self.state = 242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LPAREN)
            else:
                return self.getToken(MiniGoParser.LPAREN, i)

        def method_para(self):
            return self.getTypedRuleContext(MiniGoParser.Method_paraContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RPAREN)
            else:
                return self.getToken(MiniGoParser.RPAREN, i)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def list_para(self):
            return self.getTypedRuleContext(MiniGoParser.List_paraContext,0)


        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_decl




    def method_decl(self):

        localctx = MiniGoParser.Method_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_method_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(MiniGoParser.FUNC)
            self.state = 246
            self.match(MiniGoParser.LPAREN)
            self.state = 247
            self.method_para()
            self.state = 248
            self.match(MiniGoParser.RPAREN)
            self.state = 249
            self.match(MiniGoParser.ID)
            self.state = 250
            self.match(MiniGoParser.LPAREN)
            self.state = 251
            self.list_para()
            self.state = 252
            self.match(MiniGoParser.RPAREN)
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596836966400) != 0):
                self.state = 253
                self.types()


            self.state = 256
            self.block_statement()
            self.state = 260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 257
                    self.newline() 
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_paraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def composite_types(self):
            return self.getTypedRuleContext(MiniGoParser.Composite_typesContext,0)


        def method_para(self):
            return self.getTypedRuleContext(MiniGoParser.Method_paraContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_para




    def method_para(self):

        localctx = MiniGoParser.Method_paraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_method_para)
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.match(MiniGoParser.ID)
                self.state = 264
                self.composite_types()
                self.state = 265
                self.method_para()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.match(MiniGoParser.ID)
                self.state = 268
                self.composite_types()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def interface_method_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_method_listContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_decl




    def interface_decl(self):

        localctx = MiniGoParser.Interface_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interface_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(MiniGoParser.TYPE)
            self.state = 272
            self.match(MiniGoParser.ID)
            self.state = 273
            self.match(MiniGoParser.INTERFACE)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 274
                self.newline()
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 280
            self.match(MiniGoParser.LBRACE)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 281
                self.newline()
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 287
                self.interface_method_list()


            self.state = 290
            self.match(MiniGoParser.RBRACE)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 291
                self.match(MiniGoParser.SEMI)


            self.state = 297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 294
                    self.newline() 
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_method_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_method(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_methodContext,0)


        def interface_method_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_method_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_method_list




    def interface_method_list(self):

        localctx = MiniGoParser.Interface_method_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interface_method_list)
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.interface_method()
                self.state = 301
                self.interface_method_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.interface_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def interface_para_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_para_listContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_method




    def interface_method(self):

        localctx = MiniGoParser.Interface_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interface_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(MiniGoParser.ID)
            self.state = 307
            self.match(MiniGoParser.LPAREN)
            self.state = 308
            self.interface_para_list()
            self.state = 309
            self.match(MiniGoParser.RPAREN)
            self.state = 311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 310
                self.types()


            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 313
                self.match(MiniGoParser.SEMI)


            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 316
                self.newline()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_para_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_para(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_paraContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def interface_para_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_para_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_para_list




    def interface_para_list(self):

        localctx = MiniGoParser.Interface_para_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_interface_para_list)
        try:
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 322
                self.interface_para()
                self.state = 323
                self.match(MiniGoParser.COMMA)
                self.state = 324
                self.interface_para_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 326
                self.interface_para()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_paraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_para




    def interface_para(self):

        localctx = MiniGoParser.Interface_paraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_interface_para)
        self._la = 0 # Token type
        try:
            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.match(MiniGoParser.ID)
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596836966400) != 0):
                    self.state = 330
                    self.types()


                pass
            elif token in [48, 54]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def list_para(self):
            return self.getTypedRuleContext(MiniGoParser.List_paraContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_func_decl




    def func_decl(self):

        localctx = MiniGoParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(MiniGoParser.FUNC)
            self.state = 337
            self.match(MiniGoParser.ID)
            self.state = 338
            self.match(MiniGoParser.LPAREN)
            self.state = 339
            self.list_para()
            self.state = 340
            self.match(MiniGoParser.RPAREN)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596836966400) != 0):
                self.state = 341
                self.types()


            self.state = 344
            self.block_statement()
            self.state = 348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 345
                    self.newline() 
                self.state = 350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_paraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def para(self):
            return self.getTypedRuleContext(MiniGoParser.ParaContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_para(self):
            return self.getTypedRuleContext(MiniGoParser.List_paraContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_para




    def list_para(self):

        localctx = MiniGoParser.List_paraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_list_para)
        try:
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self.para()
                self.state = 352
                self.match(MiniGoParser.COMMA)
                self.state = 353
                self.list_para()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 355
                self.para()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_para




    def para(self):

        localctx = MiniGoParser.ParaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_para)
        try:
            self.state = 361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.match(MiniGoParser.ID)
                self.state = 359
                self.types()
                pass
            elif token in [48, 54]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_block_statement




    def block_statement(self):

        localctx = MiniGoParser.Block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_block_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(MiniGoParser.LBRACE)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 364
                self.newline()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596834615712) != 0):
                self.state = 370
                self.list_statement()


            self.state = 373
            self.match(MiniGoParser.RBRACE)
            self.state = 377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 374
                    self.newline() 
                self.state = 379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement




    def list_statement(self):

        localctx = MiniGoParser.List_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_list_statement)
        try:
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.statement()
                self.state = 381
                self.list_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 383
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statementContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement




    def statement(self):

        localctx = MiniGoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 386
                self.declared_statement()
                pass

            elif la_ == 2:
                self.state = 387
                self.assign_statement()
                pass

            elif la_ == 3:
                self.state = 388
                self.if_statement()
                pass

            elif la_ == 4:
                self.state = 389
                self.for_statement()
                pass

            elif la_ == 5:
                self.state = 390
                self.break_statement()
                pass

            elif la_ == 6:
                self.state = 391
                self.continue_statement()
                pass

            elif la_ == 7:
                self.state = 392
                self.call_statement()
                pass

            elif la_ == 8:
                self.state = 393
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Variable_declContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement




    def declared_statement(self):

        localctx = MiniGoParser.Declared_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_declared_statement)
        try:
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 396
                self.variable_decl()
                self.state = 400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 397
                        self.newline() 
                    self.state = 402
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 403
                self.const_decl()
                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 404
                        self.newline() 
                    self.state = 409
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs_list(self):
            return self.getTypedRuleContext(MiniGoParser.Lhs_listContext,0)


        def ass_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Ass_operatorContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_statement




    def assign_statement(self):

        localctx = MiniGoParser.Assign_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assign_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.lhs_list()
            self.state = 413
            self.ass_operator()
            self.state = 414
            self.expr(0)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 415
                self.match(MiniGoParser.SEMI)


            self.state = 421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 418
                    self.newline() 
                self.state = 423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lhs_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def lhs_list(self):
            return self.getTypedRuleContext(MiniGoParser.Lhs_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs_list




    def lhs_list(self):

        localctx = MiniGoParser.Lhs_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_lhs_list)
        try:
            self.state = 428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.lhs()
                self.state = 425
                self.lhs_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.lhs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arr_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_typeContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs




    def lhs(self):

        localctx = MiniGoParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_lhs)
        try:
            self.state = 435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 430
                self.arr_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 431
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 432
                self.match(MiniGoParser.ID)
                self.state = 433
                self.match(MiniGoParser.DOT)
                self.state = 434
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ass_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_ASSIGN(self):
            return self.getToken(MiniGoParser.MINUS_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(MiniGoParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def REM_ASSIGN(self):
            return self.getToken(MiniGoParser.REM_ASSIGN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_ass_operator




    def ass_operator(self):

        localctx = MiniGoParser.Ass_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ass_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34084860461058) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def list_else_if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_else_if_statementContext,0)


        def else_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Else_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_statement




    def if_statement(self):

        localctx = MiniGoParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(MiniGoParser.IF)
            self.state = 440
            self.match(MiniGoParser.LPAREN)
            self.state = 441
            self.expr(0)
            self.state = 442
            self.match(MiniGoParser.RPAREN)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 443
                self.newline()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 449
            self.block_statement()
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 450
                self.list_else_if_statement()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 453
                self.else_statement()


            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 456
                    self.newline() 
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_else_if_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def else_if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Else_if_statementContext,0)


        def list_else_if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_else_if_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_else_if_statement




    def list_else_if_statement(self):

        localctx = MiniGoParser.List_else_if_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_list_else_if_statement)
        try:
            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.else_if_statement()
                self.state = 463
                self.list_else_if_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 465
                self.else_if_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_if_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_else_if_statement




    def else_if_statement(self):

        localctx = MiniGoParser.Else_if_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_else_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(MiniGoParser.ELSE)
            self.state = 469
            self.match(MiniGoParser.IF)
            self.state = 470
            self.match(MiniGoParser.LPAREN)
            self.state = 471
            self.expr(0)
            self.state = 472
            self.match(MiniGoParser.RPAREN)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 473
                self.newline()
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 479
            self.block_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_else_statement




    def else_statement(self):

        localctx = MiniGoParser.Else_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_else_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(MiniGoParser.ELSE)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==3:
                self.state = 482
                self.newline()
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 488
            self.block_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Block_statementContext,0)


        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def init_for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Init_for_statementContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def value_assign(self):
            return self.getTypedRuleContext(MiniGoParser.Value_assignContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_statement




    def for_statement(self):

        localctx = MiniGoParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.match(MiniGoParser.FOR)
                self.state = 491
                self.expr(0)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 492
                    self.newline()
                    self.state = 497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 498
                self.block_statement()
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 499
                        self.newline() 
                    self.state = 504
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(MiniGoParser.FOR)
                self.state = 506
                self.init_for_statement()
                self.state = 507
                self.match(MiniGoParser.SEMI)
                self.state = 508
                self.expr(0)
                self.state = 509
                self.match(MiniGoParser.SEMI)
                self.state = 510
                self.statement()
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 511
                    self.newline()
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 517
                self.block_statement()
                self.state = 521
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 518
                        self.newline() 
                    self.state = 523
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 524
                self.match(MiniGoParser.FOR)
                self.state = 525
                self.match(MiniGoParser.ID)
                self.state = 526
                self.match(MiniGoParser.COMMA)
                self.state = 527
                self.value_assign()
                self.state = 528
                self.expr(0)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==3:
                    self.state = 529
                    self.newline()
                    self.state = 534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 535
                self.block_statement()
                self.state = 539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 536
                        self.newline() 
                    self.state = 541
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_for_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_init_for_statement




    def init_for_statement(self):

        localctx = MiniGoParser.Init_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_init_for_statement)
        self._la = 0 # Token type
        try:
            self.state = 556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.match(MiniGoParser.VAR)
                self.state = 545
                self.match(MiniGoParser.ID)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 38280596836966400) != 0):
                    self.state = 546
                    self.types()


                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39:
                    self.state = 549
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 550
                    self.expr(0)


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 553
                self.match(MiniGoParser.ID)
                self.state = 554
                _la = self._input.LA(1)
                if not(_la==1 or _la==39):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 555
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_value_assign




    def value_assign(self):

        localctx = MiniGoParser.Value_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_value_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(MiniGoParser.ID)
            self.state = 559
            self.match(MiniGoParser.T__0)
            self.state = 560
            self.match(MiniGoParser.RANGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_break_statement




    def break_statement(self):

        localctx = MiniGoParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(MiniGoParser.BREAK)
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 563
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 564
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 567
                    self.newline() 
                self.state = 572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_call_statement




    def call_statement(self):

        localctx = MiniGoParser.Call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_call_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.lhs()
            self.state = 574
            self.match(MiniGoParser.LPAREN)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758905499648) != 0):
                self.state = 575
                self.list_expr()


            self.state = 578
            self.match(MiniGoParser.RPAREN)
            self.state = 581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 579
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 580
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 586
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 583
                    self.newline() 
                self.state = 588
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_statement




    def continue_statement(self):

        localctx = MiniGoParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(MiniGoParser.CONTINUE)
            self.state = 592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 590
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 591
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 597
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 594
                    self.newline() 
                self.state = 599
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def newline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlineContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlineContext,i)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_return_statement




    def return_statement(self):

        localctx = MiniGoParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(MiniGoParser.RETURN)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758905499648) != 0):
                self.state = 601
                self.expr(0)


            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 604
                self.match(MiniGoParser.SEMI)
                pass
            elif token in [2, 3]:
                self.state = 605
                self.newline()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 608
                    self.newline() 
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_expr




    def list_expr(self):

        localctx = MiniGoParser.List_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_list_expr)
        try:
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                self.expr(0)
                self.state = 615
                self.match(MiniGoParser.COMMA)
                self.state = 616
                self.list_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.And_exprContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expr



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.and_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 629
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                    self.state = 624
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 625
                    self.match(MiniGoParser.OR)
                    self.state = 626
                    self.and_expr(0) 
                self.state = 631
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class And_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rela_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Rela_exprContext,0)


        def and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.And_exprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_and_expr



    def and_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.And_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_and_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.rela_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 640
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.And_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_and_expr)
                    self.state = 635
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 636
                    self.match(MiniGoParser.AND)
                    self.state = 637
                    self.rela_expr(0) 
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Rela_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Add_exprContext,0)


        def rela_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Rela_exprContext,0)


        def REL(self):
            return self.getToken(MiniGoParser.REL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_rela_expr



    def rela_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Rela_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_rela_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.add_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Rela_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_rela_expr)
                    self.state = 646
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 647
                    self.match(MiniGoParser.REL)
                    self.state = 648
                    self.add_expr(0) 
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Add_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mul_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Mul_exprContext,0)


        def add_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Add_exprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_add_expr



    def add_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Add_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_add_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.mul_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Add_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_add_expr)
                    self.state = 657
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 658
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==27):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 659
                    self.mul_expr(0) 
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mul_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_exprContext,0)


        def mul_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Mul_exprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_mul_expr



    def mul_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Mul_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_mul_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.unary_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 673
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Mul_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mul_expr)
                    self.state = 668
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 669
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1879048192) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 670
                    self.unary_expr() 
                self.state = 675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Unary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Unary_exprContext,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def primary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_unary_expr




    def unary_expr(self):

        localctx = MiniGoParser.Unary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_unary_expr)
        self._la = 0 # Token type
        try:
            self.state = 679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25, 27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 676
                _la = self._input.LA(1)
                if not(_la==25 or _la==27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 677
                self.unary_expr()
                pass
            elif token in [21, 23, 24, 47, 51, 55, 56, 57, 58, 59, 60, 61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 678
                self.primary_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_call(self):
            return self.getTypedRuleContext(MiniGoParser.Func_callContext,0)


        def exprd(self):
            return self.getTypedRuleContext(MiniGoParser.ExprdContext,0)


        def primary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_exprContext,0)


        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primary_expr



    def primary_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Primary_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_primary_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 682
                self.func_call()
                pass

            elif la_ == 2:
                self.state = 683
                self.exprd()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 703
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 701
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Primary_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primary_expr)
                        self.state = 686
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 687
                        self.match(MiniGoParser.LBRACK)
                        self.state = 688
                        self.expr(0)
                        self.state = 689
                        self.match(MiniGoParser.RBRACK)
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Primary_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primary_expr)
                        self.state = 691
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 692
                        self.match(MiniGoParser.DOT)
                        self.state = 693
                        self.match(MiniGoParser.ID)
                        self.state = 699
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                        if la_ == 1:
                            self.state = 694
                            self.match(MiniGoParser.LPAREN)
                            self.state = 696
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758905499648) != 0):
                                self.state = 695
                                self.list_expr()


                            self.state = 698
                            self.match(MiniGoParser.RPAREN)


                        pass

             
                self.state = 705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literals(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralsContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprd




    def exprd(self):

        localctx = MiniGoParser.ExprdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_exprd)
        try:
            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.literals()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.match(MiniGoParser.LPAREN)
                self.state = 709
                self.expr(0)
                self.state = 710
                self.match(MiniGoParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 712
                self.match(MiniGoParser.RANGE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def newline(self):
            return self.getTypedRuleContext(MiniGoParser.NewlineContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_func_call




    def func_call(self):

        localctx = MiniGoParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(MiniGoParser.ID)
            self.state = 716
            self.match(MiniGoParser.LPAREN)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758905499648) != 0):
                self.state = 717
                self.list_expr()


            self.state = 720
            self.match(MiniGoParser.RPAREN)
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 721
                self.newline()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_method_call




    def method_call(self):

        localctx = MiniGoParser.Method_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_method_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.expr(0)
            self.state = 725
            self.match(MiniGoParser.DOT)
            self.state = 726
            self.match(MiniGoParser.ID)
            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 727
                self.match(MiniGoParser.LPAREN)


            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578049758905499648) != 0):
                self.state = 730
                self.list_expr()


            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 733
                self.match(MiniGoParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive_types(self):
            return self.getTypedRuleContext(MiniGoParser.Primitive_typesContext,0)


        def composite_types(self):
            return self.getTypedRuleContext(MiniGoParser.Composite_typesContext,0)


        def arr_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_types




    def types(self):

        localctx = MiniGoParser.TypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_types)
        try:
            self.state = 739
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 14, 15, 16, 22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self.primitive_types()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 737
                self.composite_types()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 738
                self.arr_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_primitive_types




    def primitive_types(self):

        localctx = MiniGoParser.Primitive_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_primitive_types)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4317184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Composite_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_type(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_typeContext,0)


        def interface_type(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_composite_types




    def composite_types(self):

        localctx = MiniGoParser.Composite_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_composite_types)
        try:
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.struct_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.interface_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_type




    def struct_type(self):

        localctx = MiniGoParser.Struct_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_struct_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_type




    def interface_type(self):

        localctx = MiniGoParser.Interface_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_interface_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operatorContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_type




    def arr_type(self):

        localctx = MiniGoParser.Arr_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_arr_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.index_operator()
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 752
                self.types()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def int_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Int_litContext,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def index_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operatorContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_index_operator




    def index_operator(self):

        localctx = MiniGoParser.Index_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_index_operator)
        try:
            self.state = 764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.match(MiniGoParser.LBRACK)
                self.state = 756
                self.int_lit()
                self.state = 757
                self.match(MiniGoParser.RBRACK)
                self.state = 758
                self.index_operator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 760
                self.match(MiniGoParser.LBRACK)
                self.state = 761
                self.int_lit()
                self.state = 762
                self.match(MiniGoParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Int_litContext,0)


        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def STR_LIT(self):
            return self.getToken(MiniGoParser.STR_LIT, 0)

        def bool_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Bool_litContext,0)


        def arr_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_litContext,0)


        def struct_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_litContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literals




    def literals(self):

        localctx = MiniGoParser.LiteralsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_literals)
        try:
            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56, 57, 58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.int_lit()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 767
                self.match(MiniGoParser.FLOAT_LIT)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.match(MiniGoParser.STR_LIT)
                pass
            elif token in [23, 24]:
                self.enterOuterAlt(localctx, 4)
                self.state = 769
                self.bool_lit()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 5)
                self.state = 770
                self.arr_lit()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 771
                self.struct_lit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def list_field(self):
            return self.getTypedRuleContext(MiniGoParser.List_fieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_lit




    def struct_lit(self):

        localctx = MiniGoParser.Struct_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_struct_lit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(MiniGoParser.ID)
            self.state = 775
            self.match(MiniGoParser.LBRACE)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 776
                self.list_field()


            self.state = 779
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self):
            return self.getTypedRuleContext(MiniGoParser.FieldContext,0)


        def newline(self):
            return self.getTypedRuleContext(MiniGoParser.NewlineContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_field(self):
            return self.getTypedRuleContext(MiniGoParser.List_fieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_field




    def list_field(self):

        localctx = MiniGoParser.List_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_list_field)
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.field()
                self.state = 783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 782
                    self.newline()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.field()
                self.state = 786
                self.match(MiniGoParser.COMMA)
                self.state = 787
                self.list_field()
                self.state = 789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 788
                    self.newline()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field




    def field(self):

        localctx = MiniGoParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(MiniGoParser.ID)
            self.state = 794
            self.match(MiniGoParser.COLON)
            self.state = 795
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arr_type(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_typeContext,0)


        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def arr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_lit




    def arr_lit(self):

        localctx = MiniGoParser.Arr_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arr_lit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.arr_type()
            self.state = 798
            self.match(MiniGoParser.LBRACE)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4578612708858920960) != 0):
                self.state = 799
                self.arr_list()


            self.state = 802
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def arr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_listContext,0)


        def list_expr(self):
            return self.getTypedRuleContext(MiniGoParser.List_exprContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_list




    def arr_list(self):

        localctx = MiniGoParser.Arr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_arr_list)
        self._la = 0 # Token type
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.match(MiniGoParser.LBRACE)
                self.state = 805
                self.arr_list()
                pass
            elif token in [21, 23, 24, 25, 27, 47, 51, 55, 56, 57, 58, 59, 60, 61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.list_expr()
                self.state = 808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 807
                    self.match(MiniGoParser.RBRACE)


                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 810
                    self.match(MiniGoParser.COMMA)
                    self.state = 811
                    self.arr_list()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEC_LIT(self):
            return self.getToken(MiniGoParser.DEC_LIT, 0)

        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_int_lit




    def int_lit(self):

        localctx = MiniGoParser.Int_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_int_lit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1080863910568919040) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_float_lit




    def float_lit(self):

        localctx = MiniGoParser.Float_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_float_lit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(MiniGoParser.FLOAT_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_bool_lit




    def bool_lit(self):

        localctx = MiniGoParser.Bool_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_bool_lit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            _la = self._input.LA(1)
            if not(_la==23 or _la==24):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Str_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(MiniGoParser.STR_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_str_lit




    def str_lit(self):

        localctx = MiniGoParser.Str_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_str_lit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(MiniGoParser.STR_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MiniGoParser.RULE_newline




    def newline(self):

        localctx = MiniGoParser.NewlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_newline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 824
                self.match(MiniGoParser.T__1)


            self.state = 827
            self.match(MiniGoParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[38] = self.expr_sempred
        self._predicates[39] = self.and_expr_sempred
        self._predicates[40] = self.rela_expr_sempred
        self._predicates[41] = self.add_expr_sempred
        self._predicates[42] = self.mul_expr_sempred
        self._predicates[44] = self.primary_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def and_expr_sempred(self, localctx:And_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def rela_expr_sempred(self, localctx:Rela_exprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def add_expr_sempred(self, localctx:Add_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def mul_expr_sempred(self, localctx:Mul_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def primary_expr_sempred(self, localctx:Primary_exprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         




